filter {
  packages = [
    "scala.reflect.internal"
    # "scala.concurrent.impl"
    # "scala.reflect.runtime"
  ]
  problems=[
    # Scala Virtualized
    {
      matchName="scala.Predef$"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.Predef.__equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.EmbeddedControls"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.runtime.Settings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.Settings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControlsClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.SymbolTable.LiftedAssign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Trees.LiftedAssign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames.result"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.settings.MutableSettings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.unpickleClass"
      problemName=IncompatibleMethTypeProblem
    },
    {
      matchName="scala.reflect.runtime.SymbolLoaders#TopClassCompleter.this"
      problemName=IncompatibleMethTypeProblem
    },
    {
      matchName="scala.sys.process.ProcessImpl#CompoundProcess.futureValue"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.sys.process.ProcessImpl#CompoundProcess.futureThread"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.mutable.HashTable.nextPositivePowerOfTwo"
      problemName=DirectMissingMethodProblem
    }
    {
      matchName="scala.reflect.runtime.Settings.Yvirtpatmat"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.io.PlainNioFile"
      problemName=MissingClassProblem
    },
    # this one can be removed once there is a fix for
    # https://github.com/typesafehub/migration-manager/issues/147
    {
        matchName="scala.collection.Iterator#Leading#1.trailer"
        problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.util.hashing.MurmurHash3.wrappedBytesHash"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.util.hashing.MurmurHash3.wrappedArrayHash"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.SynchronizedOps.newMappedBaseTypeSeq"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.JavaUniverse.newMappedBaseTypeSeq"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.io.FileZipArchive$LazyEntry"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.io.ZipArchive.closeZipFile"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.io.FileZipArchive$LeakyEntry"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.collection.immutable.HashMap.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.immutable.HashMap#HashTrieMap.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.immutable.HashMap#HashMap1.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.immutable.HashMap#HashMapCollision1.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.reflect.api.SerializedTypeTag.serialVersionUID"
        problemName=MissingFieldProblem
    },
    {
      matchName="scala.annotation.showAsInfix$"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.annotation.showAsInfix"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.util.PropertiesTrait.coloredOutputEnabled"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.util.Properties.coloredOutputEnabled"
      problemName=DirectMissingMethodProblem
    }
  ]
}
