filter {
    problems=[
        # rework d526f8bd74 to duplicate tailImpl as a private method
        # {
        #     matchName="scala.collection.mutable.MutableList.tailImpl"
        #     problemName=MissingMethodProblem
        # },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$6"
            problemName=MissingMethodProblem
        },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$4"
            problemName=MissingMethodProblem
        },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$5"
            problemName=MissingMethodProblem
        },
        # TODO: revert a557a97360: bridge method appeared because result is now Int but the super-method's result type erases to Object
        # {
        #     matchName="scala.collection.immutable.Range.head"
        #     problemName=IncompatibleResultTypeProblem
        # },
        # revert 0b92073a38 2aa66bec86: SI-4664 [Make scala.util.Random Serializable] Add test case
        # {
        #     matchName="scala.util.Random"
        #     problemName=MissingTypesProblem
        # },
        # {
        #     matchName="scala.util.Random$"
        #     problemName=MissingTypesProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.BatchingExecutor$Batch"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.BatchingExecutor"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.impl.ExecutionContextImpl.scala$concurrent$impl$ExecutionContextImpl$$uncaughtExceptionHandler"
        #     problemName=MissingMethodProblem
        # },
        {
            # private nested class became private top-level class to fix SI-7018
            matchName="scala.reflect.macros.NonemptyAttachments"
            problemName=MissingClassProblem
        },

        # scala.reflect.runtime
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=IncompatibleResultTypeProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala1"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initAndEnterClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse"
        #     problemName=MissingTypesProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.initClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.initAndEnterClassAndModule"
        #     problemName=MissingMethodProblem
        # },

        # scala.reflect.internal
        {
            matchName="scala.reflect.internal.Types#Type.dealiasWidenChain"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#Type.dealiasWiden"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#Type.addThrowsAnnotation"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#TypeVar.scala$reflect$internal$Types$TypeVar$$unifySpecific$1"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#SubstSymMap.mapTreeSymbols"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#SubstSymMap.this"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.PrivateWithin"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo$Applied"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationInfos#Annotatable.addThrowsAnnotation"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.inheritsJavaVarArgsMethod"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.nonTrivialMembers"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.isJavaVarargsAncestor"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.normalizeAliases"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.nestedMemberType"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.deAlias"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.deskolemizeTypeParams"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments#Attachable.setAttachments"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationInfos#AnnotationInfo.completeInfo"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.isCompileTimeOnly"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.addThrowsAnnotation"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.toOption"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.compileTimeOnlyMessage"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.setAttachments"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.addAnnotation"
            problemName=IncompatibleMethTypeProblem
        },
        {
            matchName="scala.reflect.internal.Trees.DefDef"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees$TreeStackTraverser"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.Trees#ChangeOwnerTraverser.change"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationCheckers$AnnotationChecker"
            problemName=IncompatibleTemplateDefProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo$Applied$"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.Trees#Tree.setAttachments"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdNames#TermNames.DEFAULT_CASE"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.Applied"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.isWildcardStarType"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.isSyntheticDefaultCase"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.StripCast"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.dissectApplied"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.stripCast"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable"
            problemName=MissingTypesProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.StringContextStripMarginOps"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.inheritsJavaVarArgsMethod"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.assertCorrectThread"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.SuppressMacroExpansionAttachment"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.nonTrivialMembers"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.isJavaVarargsAncestor"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.normalizeAliases"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.DefDef"
            problemName=IncompatibleMethTypeProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.nestedMemberType"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.importPrivateWithinFromJavaFlags"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments.SuppressMacroExpansionAttachment"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.ArrayModule_genericApply"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.allParameters"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.Predef_wrapArray"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.dropNullaryMethod"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.ArrayModule_apply"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.OptionModule"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.Option_apply"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.CompileTimeOnlyAttr"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationInfos#LazyAnnotationInfo.completeInfo"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.package"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.util.package$"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.util.StripMarginInterpolator"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.util.package$StringContextStripMarginOps"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.annotations.compileTimeOnly"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.StdNames#TermNames.SelectFromTypeTree"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.existentialTransform$default$3"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.existentialTransform"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.packSymbols"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.packSymbols$default$3"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.isRawParameter"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees.substituteInfoParamsIntoDefDef"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.existentialTransform$default$3"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.existentialTransform"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.substituteInfoParamsIntoDefDef"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.packSymbols"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.packSymbols$default$3"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.isRawParameter"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ClassfileConstants.CONSTANT_INVOKEDYNAMIC"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ClassfileConstants.invokedynamic"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ClassfileConstants.CONSTANT_METHODHANDLE"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ClassfileConstants.CONSTANT_METHODTYPE"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#TypeVar.setInst"
            problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.TreeInfo.effectivePatternArity"
             problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ModifierFlags.DEFAULTMETHOD"
            problemName=MissingMethodProblem
        },
        # scala.concurrent.forkjoin (SI-7442)
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.registerWorker"
             problemName=IncompatibleMethTypeProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.externalPush"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.this"
             problemName=IncompatibleMethTypeProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.signalWork"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.awaitQuiescence"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.tryCompensate"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinTask.recordExceptionalCompletion"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinTask.internalPropagateException"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.helpJoinOnce"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.concurrent.impl.Promise$CompletionLatch"
             problemName=MissingClassProblem
        },
        {
            matchName="scala.concurrent.impl.Promise#DefaultPromise.linkRootOf"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.impl.Promise#DefaultPromise.scala$concurrent$impl$Promise$DefaultPromise$$dispatchOrAddCallback"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.getClassMethods"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.primitiveGetClassMethods"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments.unsuppressMacroExpansion"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments.suppressMacroExpansion"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments.isMacroExpansionSuppressed"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.unsuppressMacroExpansion"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.suppressMacroExpansion"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.isMacroExpansionSuppressed"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.JavaMirrors#JavaMirror#FromJavaClassCompleter.scala$reflect$runtime$JavaMirrors$JavaMirror$FromJavaClassCompleter$$enterEmptyCtorIfNecessary$1"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.ReflectionUtils.scalacShouldntLoadClass"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.ReflectionUtils.scalacShouldntLoadClassfile"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.ReflectionUtils.isTraitImplementation"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.SymbolLoaders.isInvalidClassName"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.uncheckedBounds"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.uncheckedBounds"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Definitions#DefinitionsClass.UncheckedBoundsClass"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.annotations.uncheckedBounds"
            problemName=MissingClassProblem
        }
        {
            matchName="scala.reflect.internal.Trees$Duplicator"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.Trees.duplicateAndKeepPositions"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees.scala$reflect$internal$Trees$$duplicator"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees.scala$reflect$internal$Trees$$duplicator"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.duplicateAndKeepPositions"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Trees$$duplicator"
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$PackageAndClassPattern"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.compactifyName"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdNames.compactifyName"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet$Diagnostics"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet$Entry"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet$"
            problemName=MissingClassProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet"
            problemName=MissingTypesProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.newBuilder"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.min"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.initialCapacity"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.foldLeft"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toIterable"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toIterable"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.union"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.union"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.groupBy"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.groupBy"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toSet"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toSet"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toSeq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toSeq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toIndexedSeq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.unzip3"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.nonEmpty"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.slice"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.max"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.addString"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.addString"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.addString"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.subsetOf"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.fold"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toIterator"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.foreach"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.flatten"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.headOption"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.mapResult"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.scala$reflect$internal$util$WeakHashSet$$bucketFor"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toTraversable"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toTraversable"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.filter"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.tails"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.last"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.collect"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.takeRight"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.lastOption"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.reduceRightOption"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.take"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.zipWithIndex"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.foldRight"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.hasDefiniteSize"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.<<"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sliceWithKnownBound"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.to"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.result"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.result"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.isTraversableAgain"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.add"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.partition"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toBuffer"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.update"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.view"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.view"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.view"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.view"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.tail"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.zipAll"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.retain"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.find"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.withFilter"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.init"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.findEntryOrUpdate"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.diagnostics"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.zip"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.drop"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.:\\"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.companion"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toMap"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toMap"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.genericBuilder"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.unzip"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.seq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.seq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.seq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.seq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.seq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.seq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.seq"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.&~"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toStream"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-="
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-="
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-="
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.splitAt"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.addEntry"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.aggregate"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.parCombiner"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.maxBy"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sliding"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sliding"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.repr"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.repr"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.scan"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.span"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toArray"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.findEntry"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toVector"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.scala$collection$SetLike$$super$map"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.dropWhile"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.forall"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.reduce"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.intersect"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.this"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.--="
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.loadFactor"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.copyToArray"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.copyToArray"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.copyToArray"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.canEqual"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.inits"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sliceWithKnownDelta"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.grouped"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.minBy"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet./:"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.--"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.--"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sameElements"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.par"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.equals"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sizeHint"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sizeHint"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sizeHint"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet./:\\"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.threshhold_="
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.++"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.++"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.++"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.map"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.clone"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.clone"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.diff"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.diff"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.isEmpty"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.&"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.head"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toCollection"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toCollection"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.++:"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.++:"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.mkString"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.mkString"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.mkString"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.threshhold"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.iterator"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.toList"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.-"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.++="
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.takeWhile"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.exists"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.scanRight"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.transpose"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sizeHintBounded"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.hashCode"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.scala$collection$mutable$Cloneable$$super$clone"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.remove"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.|"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.reduceLeft"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.count"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.scanLeft"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.reduceLeftOption"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.dropRight"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.collectFirst"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.flatMap"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+="
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+="
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+="
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.+="
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.reversed"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.sum"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.filterNot"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.product"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.thisCollection"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.thisCollection"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.copyToBuffer"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.subsets"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.subsets"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.reduceRight"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.empty"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.empty"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.empty"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.stringPrefix"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.WeakHashSet.reduceOption"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$uniques"
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$uniques_="
            problemName=IncompatibleMethTypeProblem
        },
        {
            matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$uniques"
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$uniques_="
            problemName=IncompatibleMethTypeProblem
        },
        {
            matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$uniques"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$uniques_="
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.isDeferredOrDefault"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Symbols#Symbol.isDeferredNotDefault"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.HasFlags.isDeferredOrDefault"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.HasFlags.isDeferredNotDefault"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees#Modifiers.isDeferredOrDefault"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees#Modifiers.isDeferredNotDefault"
            problemName=MissingMethodProblem
        }
    ]
}
