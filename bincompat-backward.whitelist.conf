filter {
    problems=[
        # Scala library
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$4"
            problemName=MissingMethodProblem
        },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$5"
            problemName=MissingMethodProblem
        },
        # {
        #     # private[scala]
        #     matchName="scala.collection.immutable.ListSerializeStart$"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[scala]
        #     matchName="scala.collection.immutable.ListSerializeStart"
        #     problemName=MissingClassProblem
        # },
        {
            # private nested class became private top-level class to fix SI-7018
            matchName="scala.reflect.macros.Attachments$NonemptyAttachments"
            problemName=MissingClassProblem
        },

        # scala.reflect.runtime
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initAndEnterClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=IncompatibleResultTypeProblem
        # },


        # scala.reflect.internal
        {
            matchName="scala.reflect.internal.TreeInfo.scala$reflect$internal$TreeInfo$$isVarPatternDeep0$1"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.typeArguments"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.applyDepth"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.firstTypeArg"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.methPart"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.firstArgument"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees.DefDef"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.deskolemizeTypeParams"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.deAlias"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.deskolemizeTypeParams"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationInfos#Annotatable.addThrowsAnnotation"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments#Attachable.setAttachments"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#TypeVar.scala$reflect$internal$Types$TypeVar$$addBound$1"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationCheckers$AnnotationChecker"
            problemName=IncompatibleTemplateDefProblem
        },
        {
            matchName="scala.reflect.internal.Types.deAlias"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.inheritsJavaVarArgsMethod"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.nonTrivialMembers"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.isJavaVarargsAncestor"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.nestedMemberType"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.normalizeAliases"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees#ChangeOwnerTraverser.changeOwner"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments.SuppressMacroExpansionAttachment"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.Statistics#RelCounter.scala$reflect$internal$util$Statistics$RelCounter$$super$prefix"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Names#NameOps.name"
            problemName=MissingFieldProblem
        },
        {
             matchName="scala.reflect.internal.Types$SubstWildcardMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$FilterTypeCollector"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$AsSeenFromMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$TypeTraverser"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$VariantTypeMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$TypeTraverserWithResult"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$ContainsCollector"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$ExistentialExtrapolation"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$TypeCollector"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$InstantiateDependentMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$TypeMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$SubstMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Trees#TypeMapTreeSubstituter.typeMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Trees#TypeMapTreeSubstituter.this"
             problemName=IncompatibleMethTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types$FindTypeCollector"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$UndoLog"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$ContainsTypeCollector"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$SubTypePair"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types.dropAllRefinements"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.isSubType"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.isSubType"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.ErroneousCollector"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.weakLub"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.isHKSubType0"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.isWeakSubType"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$tostringRecursions"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.isDifferentType"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$AnyDepth"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.etaExpandKeepsStar"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.isSameType2"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$globalGlbDepth_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$subsametypeRecursions_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$pendingSubTypes_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.adaptToNewRunMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.dropSingletonType"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$lubResults_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$_setter_$GlbFailure_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.isDifferentTypeConstructor"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.wildcardToTypeVarMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$printLubs"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.dropRepeatedParamType"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$tostringRecursions_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.toDeBruijn"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.glb"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.isNumericSubType"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.newUndoLog"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.commonOwnerMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$indent"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.spanningTypes"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$lubResults"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$verifyLubs"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.numericGlb"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.glbNorm"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$pendingSubTypes"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.typeVarToOriginMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.typeToString"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.rawToExistential"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.lub"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.weakGlb"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.findRecursiveBounds"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.isPossiblePrefix"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.ApproximateDependentMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$globalGlbDepth"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.abstractTypesToBounds"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.IsDependentCollector"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.numericLub"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.undoLog"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.StripAnnotationsMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.isSameType"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$glbResults"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$globalGlbLimit"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$commonOwnerMapObj"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$printLubs_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$subsametypeRecursions"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$LogPendingSubTypesThreshold"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$glbResults_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.fromDeBruijn"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types.scala$reflect$internal$Types$$indent_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.solve"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.solve"
             problemName=UpdateForwarderBodyProblem
        },
        {
             matchName="scala.reflect.internal.Types.containsNull"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.matchingParams"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.isRawIfWithoutArgs"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.decr"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.specializesSym"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.AnyDepth"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.DefaultLogThreshhold"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.indent"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types.indent_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types$TypeMap$TypeMapTransformer"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$CommonOwnerMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$SubstTypeMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$Type$FilterMapForeach"
             problemName=MissingTypesProblem
        },
        {
             matchName="scala.reflect.internal.Types$AnnotationFilter"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$SubstThisMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$SubstSymMap"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Trees#TreeSymSubstituter.symSubst"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.Types$CollectTypeCollector"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types$KeepOnlyTypeConstraints"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.dropAllRefinements"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.ErroneousCollector"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$tostringRecursions"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$AnyDepth"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$globalGlbDepth_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$subsametypeRecursions_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$pendingSubTypes_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.adaptToNewRunMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.dropSingletonType"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$lubResults_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$_setter_$GlbFailure_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.wildcardToTypeVarMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$printLubs"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.dropRepeatedParamType"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$tostringRecursions_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.toDeBruijn"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.newUndoLog"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.commonOwnerMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$indent"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$verifyLubs"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$lubResults"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$pendingSubTypes"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.typeVarToOriginMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.rawToExistential"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.ApproximateDependentMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$globalGlbDepth"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.IsDependentCollector"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.undoLog"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.StripAnnotationsMap"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$glbResults"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$globalGlbLimit"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$commonOwnerMapObj"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$printLubs_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$subsametypeRecursions"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$glbResults_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$LogPendingSubTypesThreshold"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.fromDeBruijn"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.SymbolTable.scala$reflect$internal$Types$$indent_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types$ForEachTypeTraverser"
             problemName=MissingClassProblem
        },
        {
             matchName="scala.reflect.internal.Types#TypeVar.scala$reflect$internal$Types$$suspended"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.Types#TypeVar.scala$reflect$internal$Types$$suspended_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.transform.Erasure$ScalaErasureMap"
             problemName=MissingTypesProblem
        },
        {
             matchName="scala.reflect.internal.transform.Erasure$ErasureMap"
             problemName=MissingTypesProblem
        },
        {
             matchName="scala.reflect.internal.transform.Erasure$JavaErasureMap"
             problemName=MissingTypesProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.scala$reflect$internal$transform$UnCurry$_setter_$scala$reflect$internal$transform$UnCurry$$uncurryType_="
             problemName=IncompatibleMethTypeProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.scala$reflect$internal$transform$UnCurry$$uncurryType"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.uncurry"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.scala$reflect$internal$transform$UnCurry$_setter_$uncurry_="
             problemName=IncompatibleMethTypeProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.scala$reflect$internal$transform$UnCurry$_setter_$scala$reflect$internal$transform$UnCurry$$uncurryType_="
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.scala$reflect$internal$transform$UnCurry$$uncurryType"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.uncurry"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.reflect.internal.transform.UnCurry.scala$reflect$internal$transform$UnCurry$_setter_$uncurry_="
             problemName=MissingMethodProblem
        }
    ]
}

