filter {
    problems=[
        # Scala library
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$4"
            problemName=MissingMethodProblem
        },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$5"
            problemName=MissingMethodProblem
        },
        # {
        #     # private[scala]
        #     matchName="scala.collection.immutable.ListSerializeStart$"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[scala]
        #     matchName="scala.collection.immutable.ListSerializeStart"
        #     problemName=MissingClassProblem
        # },
        {
            # private nested class became private top-level class to fix SI-7018
            matchName="scala.reflect.macros.Attachments$NonemptyAttachments"
            problemName=MissingClassProblem
        },

        # scala.reflect.runtime
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initAndEnterClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=IncompatibleResultTypeProblem
        # },


        # scala.reflect.internal
        {
            matchName="scala.reflect.internal.TreeInfo.scala$reflect$internal$TreeInfo$$isVarPatternDeep0$1"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.typeArguments"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.applyDepth"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.firstTypeArg"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.methPart"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.TreeInfo.firstArgument"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees.DefDef"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.deskolemizeTypeParams"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.deAlias"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.SymbolTable.deskolemizeTypeParams"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationInfos#Annotatable.addThrowsAnnotation"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments#Attachable.setAttachments"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#TypeVar.scala$reflect$internal$Types$TypeVar$$addBound$1"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.AnnotationCheckers$AnnotationChecker"
            problemName=IncompatibleTemplateDefProblem
        },
        {
            matchName="scala.reflect.internal.Types.deAlias"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.inheritsJavaVarArgsMethod"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.nonTrivialMembers"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.isJavaVarargsAncestor"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.nestedMemberType"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types.normalizeAliases"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees#ChangeOwnerTraverser.changeOwner"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.StdAttachments.SuppressMacroExpansionAttachment"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.util.Statistics#RelCounter.scala$reflect$internal$util$Statistics$RelCounter$$super$prefix"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Names#NameOps.name"
            problemName=MissingFieldProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.existentialTransform$default$3"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.existentialTransform"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.packSymbols"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.packSymbols$default$3"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ExistentialsAndSkolems.isRawParameter"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Trees.substituteInfoParamsIntoDefDef"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.ClassfileConstants.xxxunusedxxxx"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.internal.Types#TypeVar.setInst"
            problemName=IncompatibleResultTypeProblem
        },
        # scala.concurrent.forkjoin (SI-7442)
        {
            matchName="scala.concurrent.forkjoin.ForkJoinTask.internalGetCompleter"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.registerWorker"
            problemName=IncompatibleMethTypeProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.nextWorkerName"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.signalWork"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.idlePerActive"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.tryCompensate"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.helpJoinOnce"
            problemName=IncompatibleResultTypeProblem
        }
    ]
}
