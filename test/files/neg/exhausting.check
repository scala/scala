exhausting.scala:23: warning: match may not be exhaustive.
It would fail on the following inputs: List(_), List(_, _, _)
  def fail1[T](xs: List[T]) = xs match {
                              ^
exhausting.scala:29: warning: match may not be exhaustive.
It would fail on the following input: Nil
  def fail2[T](xs: List[T]) = xs match {
                              ^
exhausting.scala:34: warning: match may not be exhaustive.
It would fail on the following input: List((x: Int forSome x not in (1, 2)))
  def fail3a(xs: List[Int]) = xs match {
                              ^
exhausting.scala:41: warning: match may not be exhaustive.
It would fail on the following input: Bar3
  def fail3[T](x: Foo[T]) = x match {
                            ^
exhausting.scala:49: warning: match may not be exhaustive.
It would fail on the following inputs: (Bar1, Bar2), (Bar1, Bar3), (Bar2, Bar1), (Bar2, Bar2)
  def fail4[T <: AnyRef](xx: (Foo[T], Foo[T])) = xx match {
                                                 ^
exhausting.scala:58: warning: match may not be exhaustive.
It would fail on the following inputs: (Bar1, Bar2), (Bar1, Bar3), (Bar2, Bar1), (Bar2, Bar2)
  def fail5[T](xx: (Foo[T], Foo[T])) = xx match {
                                       ^
6 warnings
error: No warnings can be incurred under -Werror.
