abstract-report2.scala:3: error: class Foo needs to be abstract.
Missing implementations for 13 members of trait Collection.
  def add(x$1: Int): Boolean = ??? // implements `def add(x$1: E): Boolean`
  def addAll(x$1: java.util.Collection[_ <: Int]): Boolean = ??? // implements `def addAll(x$1: java.util.Collection[_ <: E]): Boolean`
  def clear(): Unit = ???
  def contains(x$1: Object): Boolean = ???
  def containsAll(x$1: java.util.Collection[_]): Boolean = ???
  def isEmpty(): Boolean = ???
  def iterator(): java.util.Iterator[Int] = ??? // implements `def iterator(): java.util.Iterator[E]`
  def remove(x$1: Object): Boolean = ???
  def removeAll(x$1: java.util.Collection[_]): Boolean = ???
  def retainAll(x$1: java.util.Collection[_]): Boolean = ???
  def size(): Int = ???
  def toArray[T](x$1: Array[T with Object]): Array[T with Object] = ???
  def toArray(): Array[Object] = ???

class Foo extends Collection[Int]
      ^
abstract-report2.scala:5: error: class Bar needs to be abstract.
Missing implementations for 13 members of trait Collection.
  def add(x$1: List[_ <: String]): Boolean = ??? // implements `def add(x$1: E): Boolean`
  def addAll(x$1: java.util.Collection[_ <: List[_ <: String]]): Boolean = ??? // implements `def addAll(x$1: java.util.Collection[_ <: E]): Boolean`
  def clear(): Unit = ???
  def contains(x$1: Object): Boolean = ???
  def containsAll(x$1: java.util.Collection[_]): Boolean = ???
  def isEmpty(): Boolean = ???
  def iterator(): java.util.Iterator[List[_ <: String]] = ??? // implements `def iterator(): java.util.Iterator[E]`
  def remove(x$1: Object): Boolean = ???
  def removeAll(x$1: java.util.Collection[_]): Boolean = ???
  def retainAll(x$1: java.util.Collection[_]): Boolean = ???
  def size(): Int = ???
  def toArray[T](x$1: Array[T with Object]): Array[T with Object] = ???
  def toArray(): Array[Object] = ???

class Bar extends Collection[List[_ <: String]]
      ^
abstract-report2.scala:7: error: class Baz needs to be abstract.
Missing implementations for 13 members of trait Collection.
  def add(x$1: T): Boolean = ??? // implements `def add(x$1: E): Boolean`
  def addAll(x$1: java.util.Collection[_ <: T]): Boolean = ??? // implements `def addAll(x$1: java.util.Collection[_ <: E]): Boolean`
  def clear(): Unit = ???
  def contains(x$1: Object): Boolean = ???
  def containsAll(x$1: java.util.Collection[_]): Boolean = ???
  def isEmpty(): Boolean = ???
  def iterator(): java.util.Iterator[T] = ??? // implements `def iterator(): java.util.Iterator[E]`
  def remove(x$1: Object): Boolean = ???
  def removeAll(x$1: java.util.Collection[_]): Boolean = ???
  def retainAll(x$1: java.util.Collection[_]): Boolean = ???
  def size(): Int = ???
  def toArray[T](x$1: Array[T with Object]): Array[T with Object] = ???
  def toArray(): Array[Object] = ???

class Baz[T] extends Collection[T]
      ^
abstract-report2.scala:21: error: class Dingus needs to be abstract.
Missing implementations for 7 members.
  // Members declared in scala.collection.IterableOnce
  def iterator: Iterator[(Set[Int], String)] = ??? // implements `def iterator: Iterator[A]`

  // Members declared in scala.collection.IterableOps
  protected def coll: List[(Set[Int], String)] = ??? // implements `protected def coll: C`
  protected def fromSpecific(coll: scala.collection.IterableOnce[(Set[Int], String)]): List[(Set[Int], String)] = ??? // implements `protected def fromSpecific(coll: scala.collection.IterableOnce[A @scala.annotation.unchecked.uncheckedVariance]): C`
  def iterableFactory: scala.collection.IterableFactory[List] = ??? // implements `def iterableFactory: scala.collection.IterableFactory[CC]`
  protected def newSpecificBuilder: scala.collection.mutable.Builder[(Set[Int], String),List[(Set[Int], String)]] = ??? // implements `protected def newSpecificBuilder: scala.collection.mutable.Builder[A @scala.annotation.unchecked.uncheckedVariance,C]`
  def toIterable: Iterable[(Set[Int], String)] = ??? // implements `def toIterable: Iterable[A]`

  // Members declared in Xyz
  def foo(x: List[Int]): Boolean = ??? // implements `def foo(x: T): Boolean`

class Dingus extends Bippy[String, Set[Int], List[Int]]
      ^
abstract-report2.scala:23: error: class JustOne needs to be abstract.
Missing implementation for member of trait Collection:
  def toArray[T](x$1: Array[T with Object]): Array[T with Object] = ???

class JustOne extends Collection[Int] {
      ^
abstract-report2.scala:47: error: class C needs to be a mixin.
abstract override def t(): Int (defined in trait T) is marked `abstract` and `override`, but no concrete implementation could be found in a base class
class C extends T               // refchecks
      ^
abstract-report2.scala:50: error: class D needs to be a mixin.
abstract override def t(): Int (defined in trait W) is marked `abstract` and `override` and overrides incomplete superclass member
abstract override def t(): Int (defined in trait V)
class D extends W
      ^
7 errors
