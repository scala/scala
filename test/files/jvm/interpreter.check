
scala> // basics

scala> 3+4
val res0: Int = 7

scala> def gcd(x: Int, y: Int): Int = {
          if (x == 0) y
          else if (y == 0) x
          else gcd(y%x, x)
}
def gcd(x: Int, y: Int): Int

scala> val five = gcd(15,35)
val five: Int = 5

scala> var x = 1
var x: Int = 1

scala> x = 2
// mutated x

scala> val three = x+1
val three: Int = 3

scala> type anotherint = Int
type anotherint

scala> val four: anotherint = 4
val four: anotherint = 4

scala> val bogus: anotherint = "hello"
                               ^
       error: type mismatch;
        found   : String("hello")
        required: anotherint
           (which expands to)  Int

scala> trait PointlessTrait
trait PointlessTrait

scala> val (x,y) = (2,3)
val x: Int = 2
val y: Int = 3

scala> println("hello")
hello

scala> 

scala> // ticket #1513

scala> val t1513 = Array(null)
val t1513: Array[Null] = Array(null)

scala> // overriding toString problem from #1404

scala> class S(override val toString : String)
class S

scala> val fish = new S("fish")
val fish: S = fish

scala> // Test that arrays pretty print nicely.

scala> val arr = Array("What's", "up", "doc?")
val arr: Array[String] = Array(What's, up, doc?)

scala> // Test that arrays pretty print nicely, even when we give them type Any

scala> val arrInt : Any = Array(1,2,3)
val arrInt: Any = Array(1, 2, 3)

scala> // Test that nested arrays are pretty-printed correctly

scala> val arrArrInt : Any = Array(Array(1, 2), Array(3, 4))
val arrArrInt: Any = Array(Array(1, 2), Array(3, 4))

scala> 

scala> // implicit conversions

scala> case class Foo(n: Int)
class Foo

scala> case class Bar(n: Int)
class Bar

scala> implicit def foo2bar(foo: Foo) = Bar(foo.n)
                    ^
       warning: Implicit definition should have explicit type (inferred Bar) [quickfixable]
warning: 1 feature warning; for details, enable `:setting -feature` or `:replay -feature`
def foo2bar(foo: Foo): Bar

scala> val bar: Bar = Foo(3)
val bar: Bar = Bar(3)

scala> 

scala> // importing from a previous result

scala> import bar._
import bar._

scala> val m = n
val m: Int = 3

scala> 

scala> // stressing the imports mechanism

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> val one = 1
val one: Int = 1

scala> 

scala> 

scala> val x1 = 1
val x1: Int = 1

scala> val x2 = 1
val x2: Int = 1

scala> val x3 = 1
val x3: Int = 1

scala> val x4 = 1
val x4: Int = 1

scala> val x5 = 1
val x5: Int = 1

scala> val x6 = 1
val x6: Int = 1

scala> val x7 = 1
val x7: Int = 1

scala> val x8 = 1
val x8: Int = 1

scala> val x9 = 1
val x9: Int = 1

scala> val x10 = 1
val x10: Int = 1

scala> val x11 = 1
val x11: Int = 1

scala> val x12 = 1
val x12: Int = 1

scala> val x13 = 1
val x13: Int = 1

scala> val x14 = 1
val x14: Int = 1

scala> val x15 = 1
val x15: Int = 1

scala> val x16 = 1
val x16: Int = 1

scala> val x17 = 1
val x17: Int = 1

scala> val x18 = 1
val x18: Int = 1

scala> val x19 = 1
val x19: Int = 1

scala> val x20 = 1
val x20: Int = 1

scala> 

scala> val two = one + x5
val two: Int = 2

scala> 

scala> // handling generic wildcard arrays (#2386)

scala> // It's put here because type feedback is an important part of it.

scala> val xs: Array[_] = Array(1, 2)
val xs: Array[_] = Array(1, 2)

scala> xs.size
val res2: Int = 2

scala> xs.head
val res3: Any = 1

scala> xs filter (_ == 2)
val res4: Array[_] = Array(2)

scala> xs map (_ => "abc")
val res5: Array[String] = Array(abc, abc)

scala> xs map (x => x)
val res6: Array[_] = Array(1, 2)

scala> xs map (x => (x, x))
warning: 1 feature warning; for details, enable `:setting -feature` or `:replay -feature`
val res7: Array[(_$1, _$1)] forSome { type _$1 } = Array((1,1), (2,2))

scala> 

scala> // interior syntax errors should *not* go into multi-line input mode.

scala> // both of the following should abort immediately:

scala> def x => y => z
             ^
       error: '=' expected but '=>' found.

scala> [1,2,3]
       ^
       error: illegal start of definition

scala> 

scala> 

scala> 

scala> /*
  /*
    multi-line comment
  */
*/

scala> 

scala> 

scala> // multi-line string

scala> """
hello
there
"""
val res8: String =
"
hello
there
"

scala> (1 +   // give up early by typing two blank lines


You typed two blank lines.  Starting a new command.

scala> // defining and using quoted names should work (ticket #323)

scala> def `match` = 1
def match: Int

scala> val x = `match`
val x: Int = 1

scala> 

scala> // multiple classes defined on one line

scala> sealed class Exp; class Fact extends Exp; class Term extends Exp
class Exp
class Fact
class Term

scala> def f(e: Exp) = e match {  // non-exhaustive warning here
  case _:Fact => 3
}
                       ^
       warning: match may not be exhaustive.
       It would fail on the following inputs: Exp(), Term()
def f(e: Exp): Int

scala> :quit
def plusOne(x: Int): Int
val res0: Int = 6
val res0: String = after reset
       ^
       error: not found: value plusOne
