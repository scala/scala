[[syntax trees at end of                lambdalift]] // newSource1.scala
package <empty> {
  class T extends Object {
    <paramaccessor> val classParam: Int = _;
    def <init>(classParam: Int): T = {
      T.super.<init>();
      ()
    };
    private[this] val field: Int = 0;
    <stable> <accessor> def field(): Int = T.this.field;
    def foo(methodParam: Int): Function0 = {
      val methodLocal: Int = 0;
      {
        (new <$anon: Function0>(T.this, methodParam, methodLocal): Function0)
      }
    };
    def bar(barParam: Int): Object = {
      lazy <artifact> val MethodLocalObject$module: scala.runtime.LazyRef = new scala.runtime.LazyRef();
      T.this.MethodLocalObject$2(MethodLocalObject$module, barParam)
    };
    def tryy(tryyParam: Int): Function0 = {
      var tryyLocal: runtime.IntRef = scala.runtime.IntRef.create(0);
      {
        (new <$anon: Function0>(T.this, tryyLocal, tryyParam): Function0)
      }
    };
    @SerialVersionUID(value = 0) final <synthetic> class $anonfun$foo$1 extends scala.runtime.AbstractFunction0$mcI$sp with java.io.Serializable {
      def <init>($outer: T, methodParam$1: Int, methodLocal$1: Int): <$anon: Function0> = {
        $anonfun$foo$1.super.<init>();
        ()
      };
      final def apply(): Int = $anonfun$foo$1.this.apply$mcI$sp();
      final <specialized> def apply$mcI$sp(): Int = $anonfun$foo$1.this.$outer.classParam.+($anonfun$foo$1.this.$outer.field()).+($anonfun$foo$1.this.methodParam$1).+($anonfun$foo$1.this.methodLocal$1);
      <synthetic> <paramaccessor> <artifact> private[this] val $outer: T = _;
      <synthetic> <stable> <artifact> def $outer(): T = $anonfun$foo$1.this.$outer;
      <bridge> <artifact> def apply(): Object = scala.Int.box($anonfun$foo$1.this.apply());
      <synthetic> <paramaccessor> private[this] val methodParam$1: Int = _;
      <synthetic> <paramaccessor> private[this] val methodLocal$1: Int = _
    };
    abstract trait MethodLocalTrait$1 extends Object {
      def /*MethodLocalTrait$1*/$init$(barParam$1: Int): Unit = {
        ()
      };
      scala.Predef.print(scala.Int.box(barParam$1));
      <synthetic> <stable> <artifact> def $outer(): T
    };
    object MethodLocalObject$1 extends Object with T#MethodLocalTrait$1 {
      def <init>($outer: T, barParam$1: Int): T#MethodLocalObject$1.type = {
        MethodLocalObject$1.super.<init>();
        MethodLocalObject$1.super./*MethodLocalTrait$1*/$init$(barParam$1);
        ()
      };
      <synthetic> <paramaccessor> <artifact> private[this] val $outer: T = _;
      <synthetic> <stable> <artifact> def $outer(): T = MethodLocalObject$1.this.$outer;
      <synthetic> <stable> <artifact> def $outer(): T = MethodLocalObject$1.this.$outer
    };
    final <artifact> private[this] def MethodLocalObject$lzycompute$1(MethodLocalObject$module$1: scala.runtime.LazyRef, barParam$1: Int): T#MethodLocalObject$1.type = MethodLocalObject$module$1.synchronized[T#MethodLocalObject$1.type](if (MethodLocalObject$module$1.initialized())
      MethodLocalObject$module$1.value().$asInstanceOf[T#MethodLocalObject$1.type]()
    else
      MethodLocalObject$module$1.initialize(new T#MethodLocalObject$1.type(T.this, barParam$1)).$asInstanceOf[T#MethodLocalObject$1.type]());
    final private[this] def MethodLocalObject$2(MethodLocalObject$module$1: scala.runtime.LazyRef, barParam$1: Int): T#MethodLocalObject$1.type = if (MethodLocalObject$module$1.initialized())
      MethodLocalObject$module$1.value().$asInstanceOf[T#MethodLocalObject$1.type]()
    else
      T.this.MethodLocalObject$lzycompute$1(MethodLocalObject$module$1, barParam$1);
    @SerialVersionUID(value = 0) final <synthetic> class $anonfun$tryy$1 extends scala.runtime.AbstractFunction0$mcV$sp with java.io.Serializable {
      def <init>($outer: T, tryyLocal$1: runtime.IntRef, tryyParam$1: Int): <$anon: Function0> = {
        $anonfun$tryy$1.super.<init>();
        ()
      };
      final def apply(): Unit = $anonfun$tryy$1.this.apply$mcV$sp();
      final <specialized> def apply$mcV$sp(): Unit = try {
        $anonfun$tryy$1.this.tryyLocal$1.elem = $anonfun$tryy$1.this.tryyParam$1
      } finally ();
      <synthetic> <paramaccessor> <artifact> private[this] val $outer: T = _;
      <synthetic> <stable> <artifact> def $outer(): T = $anonfun$tryy$1.this.$outer;
      <bridge> <artifact> def apply(): Object = {
        $anonfun$tryy$1.this.apply();
        scala.runtime.BoxedUnit.UNIT
      };
      <synthetic> <paramaccessor> private[this] val tryyLocal$1: runtime.IntRef = _;
      <synthetic> <paramaccessor> private[this] val tryyParam$1: Int = _
    }
  }
}

warning: 1 feature warning; re-run with -feature for details
