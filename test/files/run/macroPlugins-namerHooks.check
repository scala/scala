enterSym(package <empty> {   case class C extends scala.Product with scala.Serializable {     <caseaccessor> <paramaccessor> val x: Int = _;     <caseaccessor> <paramaccessor> val y: Int = _;     def <init>(x: Int, y: Int) = {       super.<init>();       ()     }   } })
enterSym(case class C extends scala.Product with scala.Serializable {   <caseaccessor> <paramaccessor> val x: Int = _;   <caseaccessor> <paramaccessor> val y: Int = _;   def <init>(x: Int, y: Int) = {     super.<init>();     ()   } })
ensureCompanionObject(case class C extends scala.Product with scala.Serializable {   <caseaccessor> <paramaccessor> val x: Int = _;   <caseaccessor> <paramaccessor> val y: Int = _;   def <init>(x: Int, y: Int) = {     super.<init>();     ()   } }, ...)
enterSym(<synthetic> object C extends scala.runtime.AbstractFunction2[Int, Int, C] {   def <init>() = {     super.<init>();     ()   };   final override <synthetic> def toString() = "C" })
enterStat(case class C extends scala.Product with scala.Serializable {   <caseaccessor> <paramaccessor> val x: Int = _;   <caseaccessor> <paramaccessor> val y: Int = _;   def <init>(x: Int, y: Int) = {     super.<init>();     ()   } })
enterSym(<caseaccessor> <paramaccessor> val x: Int = _)
enterSym(<caseaccessor> <paramaccessor> val y: Int = _)
enterSym(def <init>(x: Int, y: Int) = {   super.<init>();   () })
enterSym(<synthetic> def copy(x = x, y = y) = new C(x, y))
enterStat(<caseaccessor> <paramaccessor> private[this] val x: Int = _)
enterStat(<caseaccessor> <paramaccessor> private[this] val y: Int = _)
enterStat(def <init>(x: Int, y: Int) = {   super.<init>();   () })
enterSym(<caseaccessor> <paramaccessor> private[this] val x: Int = _)
enterSym(<caseaccessor> <paramaccessor> private[this] val y: Int = _)
enterSym(def <init>(x: Int, y: Int) = {   super.<init>();   () })
enterSym(super.<init>())
enterStat(super.<init>())
enterSym(<synthetic> def copy$default$1 = x)
enterSym(<synthetic> def copy$default$2 = y)
enterSym(<synthetic> var acc: Int = -889275714)
enterSym(acc = scala.runtime.Statics.mix(acc, x))
enterSym(acc = scala.runtime.Statics.mix(acc, y))
enterStat(<synthetic> var acc: Int = -889275714)
enterStat(acc = scala.runtime.Statics.mix(acc, x))
enterStat(acc = scala.runtime.Statics.mix(acc, y))
enterSym(<synthetic> val C$1: C = x$1.asInstanceOf[C])
enterStat(<synthetic> val C$1: C = x$1.asInstanceOf[C])
enterSym(def <init>() = {   super.<init>();   () })
enterSym(final override <synthetic> def toString() = "C")
enterSym(case <synthetic> def apply(x: Int, y: Int): C = new C(x, y))
enterSym(case <synthetic> def unapply(x$0: C): _root_.scala.Option[scala.Tuple2[Int, Int]] = if (x$0.==(null))   scala.None else   Some(scala.Tuple2(x$0.x, x$0.y)))
enterStat(def <init>() = {   super.<init>();   () })
enterStat(final override <synthetic> def toString() = "C")
enterSym(def <init>() = {   super.<init>();   () })
enterSym(final override <synthetic> def toString() = "C")
enterSym(super.<init>())
enterStat(super.<init>())
enterSym(case <synthetic> val x1: Int = x$1)
enterStat(case <synthetic> val x1: Int = x$1)
enterSym(case <synthetic> val x1: Any = x$1)
enterSym(case5(){   if (x1.isInstanceOf[C])     matchEnd4(true)   else     case6() })
enterSym(case6(){   matchEnd4(false) })
enterStat(case <synthetic> val x1: Any = x$1)
enterStat(case5(){   if (x1.isInstanceOf[C])     matchEnd4(true)   else     case6() })
enterStat(case6(){   matchEnd4(false) })
