{
  val $u: ru.type = ru;
  val $m: $u.Mirror = ru.runtimeMirror({
  final class $anon extends scala.AnyRef {
    def <init>(): <$anon: AnyRef> = {
      $anon.super.<init>();
      ()
    };
    ()
  };
  new $anon()
}.getClass().getClassLoader());
  $u.Expr.apply[Int(2)]($m, {
    final class $treecreator1 extends TreeCreator {
      def <init>(): $treecreator1 = {
        $treecreator1.super.<init>();
        ()
      };
      def apply[U <: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Tree = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.Literal.apply($u.Constant.apply(2))
      }
    };
    new $treecreator1()
  })($u.TypeTag.apply[Int(2)]($m, {
    final class $typecreator2 extends TypeCreator {
      def <init>(): $typecreator2 = {
        $typecreator2.super.<init>();
        ()
      };
      def apply[U <: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.ConstantType.apply($u.Constant.apply(2))
      }
    };
    new $typecreator2()
  }))
}
ru.reify[Int](2)
