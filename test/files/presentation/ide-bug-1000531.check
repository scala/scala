reload: CrashOnLoad.scala

askTypeCompletion at CrashOnLoad.scala(6,12)
================================================================================
[response] aksTypeCompletion at (6,12)
retrieved 126 members
[accessible:  true] `class GroupedIteratorIterator[B]#GroupedIterator`
[accessible:  true] `method !=(x$1: Any)Boolean`
[accessible:  true] `method !=(x$1: AnyRef)Boolean`
[accessible:  true] `method ##()Int`
[accessible:  true] `method +(other: String)String`
[accessible:  true] `method ++[B >: B](that: => scala.collection.GenTraversableOnce[B])Iterator[B]`
[accessible:  true] `method ->[B](y: B)(java.util.Iterator[B], B)`
[accessible:  true] `method /:[B](z: B)(op: (B, B) => B)B`
[accessible:  true] `method /:\[A1 >: B](z: A1)(op: (A1, A1) => A1)A1`
[accessible:  true] `method :\[B](z: B)(op: (B, B) => B)B`
[accessible:  true] `method ==(x$1: Any)Boolean`
[accessible:  true] `method ==(x$1: AnyRef)Boolean`
[accessible:  true] `method addString(b: StringBuilder)StringBuilder`
[accessible:  true] `method addString(b: StringBuilder, sep: String)StringBuilder`
[accessible:  true] `method addString(b: StringBuilder, start: String, sep: String, end: String)StringBuilder`
[accessible:  true] `method aggregate[B](z: => B)(seqop: (B, B) => B, combop: (B, B) => B)B`
[accessible:  true] `method asInstanceOf[T0]=> T0`
[accessible:  true] `method buffered=> scala.collection.BufferedIterator[B]`
[accessible:  true] `method collectFirst[B](pf: PartialFunction[B,B])Option[B]`
[accessible:  true] `method collect[B](pf: PartialFunction[B,B])Iterator[B]`
[accessible:  true] `method contains(elem: Any)Boolean`
[accessible:  true] `method copyToArray[B >: B](xs: Array[B])Unit`
[accessible:  true] `method copyToArray[B >: B](xs: Array[B], start: Int)Unit`
[accessible:  true] `method copyToArray[B >: B](xs: Array[B], start: Int, len: Int)Unit`
[accessible:  true] `method copyToBuffer[B >: B](dest: scala.collection.mutable.Buffer[B])Unit`
[accessible:  true] `method corresponds[B](that: scala.collection.GenTraversableOnce[B])(p: (B, B) => Boolean)Boolean`
[accessible:  true] `method count(p: B => Boolean)Int`
[accessible:  true] `method drop(n: Int)Iterator[B]`
[accessible:  true] `method dropWhile(p: B => Boolean)Iterator[B]`
[accessible:  true] `method duplicate=> (Iterator[B], Iterator[B])`
[accessible:  true] `method ensuring(cond: Boolean)java.util.Iterator[B]`
[accessible:  true] `method ensuring(cond: Boolean, msg: => Any)java.util.Iterator[B]`
[accessible:  true] `method ensuring(cond: java.util.Iterator[B] => Boolean)java.util.Iterator[B]`
[accessible:  true] `method ensuring(cond: java.util.Iterator[B] => Boolean, msg: => Any)java.util.Iterator[B]`
[accessible:  true] `method eq(x$1: AnyRef)Boolean`
[accessible:  true] `method equals(x$1: Any)Boolean`
[accessible:  true] `method exists(p: B => Boolean)Boolean`
[accessible:  true] `method filter(p: B => Boolean)Iterator[B]`
[accessible:  true] `method filterNot(p: B => Boolean)Iterator[B]`
[accessible:  true] `method find(p: B => Boolean)Option[B]`
[accessible:  true] `method flatMap[B](f: B => scala.collection.GenTraversableOnce[B])Iterator[B]`
[accessible:  true] `method foldLeft[B](z: B)(op: (B, B) => B)B`
[accessible:  true] `method foldRight[B](z: B)(op: (B, B) => B)B`
[accessible:  true] `method fold[A1 >: B](z: A1)(op: (A1, A1) => A1)A1`
[accessible:  true] `method forall(p: B => Boolean)Boolean`
[accessible:  true] `method foreach[U](f: B => U)Unit`
[accessible:  true] `method formatted(fmtstr: String)String`
[accessible:  true] `method grouped[B >: B](size: Int)Iterator[B]#GroupedIterator[B]`
[accessible:  true] `method hasDefiniteSize=> Boolean`
[accessible:  true] `method hasNext()Boolean`
[accessible:  true] `method hashCode()Int`
[accessible:  true] `method indexOf[B >: B](elem: B)Int`
[accessible:  true] `method indexWhere(p: B => Boolean)Int`
[accessible:  true] `method isEmpty=> Boolean`
[accessible:  true] `method isInstanceOf[T0]=> Boolean`
[accessible:  true] `method isTraversableAgain=> Boolean`
[accessible:  true] `method length=> Int`
[accessible:  true] `method map[B](f: B => B)Iterator[B]`
[accessible:  true] `method maxBy[B](f: B => B)(implicit cmp: Ordering[B])B`
[accessible:  true] `method max[B >: B](implicit cmp: Ordering[B])B`
[accessible:  true] `method minBy[B](f: B => B)(implicit cmp: Ordering[B])B`
[accessible:  true] `method min[B >: B](implicit cmp: Ordering[B])B`
[accessible:  true] `method mkString(sep: String)String`
[accessible:  true] `method mkString(start: String, sep: String, end: String)String`
[accessible:  true] `method mkString=> String`
[accessible:  true] `method ne(x$1: AnyRef)Boolean`
[accessible:  true] `method next()B`
[accessible:  true] `method nonEmpty=> Boolean`
[accessible:  true] `method notify()Unit`
[accessible:  true] `method notifyAll()Unit`
[accessible:  true] `method padTo[A1 >: B](len: Int, elem: A1)Iterator[A1]`
[accessible:  true] `method partition(p: B => Boolean)(Iterator[B], Iterator[B])`
[accessible:  true] `method patch[B >: B](from: Int, patchElems: Iterator[B], replaced: Int)Iterator[B]`
[accessible:  true] `method product[B >: B](implicit num: Numeric[B])B`
[accessible:  true] `method reduceLeftOption[B >: B](op: (B, B) => B)Option[B]`
[accessible:  true] `method reduceLeft[B >: B](op: (B, B) => B)B`
[accessible:  true] `method reduceOption[A1 >: B](op: (A1, A1) => A1)Option[A1]`
[accessible:  true] `method reduceRightOption[B >: B](op: (B, B) => B)Option[B]`
[accessible:  true] `method reduceRight[B >: B](op: (B, B) => B)B`
[accessible:  true] `method reduce[A1 >: B](op: (A1, A1) => A1)A1`
[accessible:  true] `method remove()Unit`
[accessible:  true] `method sameElements(that: Iterator[_])Boolean`
[accessible:  true] `method scanLeft[B](z: B)(op: (B, B) => B)Iterator[B]`
[accessible:  true] `method scanRight[B](z: B)(op: (B, B) => B)Iterator[B]`
[accessible:  true] `method seq=> Iterator[B]`
[accessible:  true] `method size=> Int`
[accessible:  true] `method slice(from: Int, until: Int)Iterator[B]`
[accessible:  true] `method sliding[B >: B](size: Int, step: Int)Iterator[B]#GroupedIterator[B]`
[accessible:  true] `method span(p: B => Boolean)(Iterator[B], Iterator[B])`
[accessible:  true] `method sum[B >: B](implicit num: Numeric[B])B`
[accessible:  true] `method synchronized[T0](x$1: T0)T0`
[accessible:  true] `method take(n: Int)Iterator[B]`
[accessible:  true] `method takeWhile(p: B => Boolean)Iterator[B]`
[accessible:  true] `method toArray[B >: B](implicit evidence$1: scala.reflect.ClassTag[B])Array[B]`
[accessible:  true] `method toBuffer[B >: B]=> scala.collection.mutable.Buffer[B]`
[accessible:  true] `method toIndexedSeq=> scala.collection.immutable.IndexedSeq[B]`
[accessible:  true] `method toIterable=> Iterable[B]`
[accessible:  true] `method toIterator=> Iterator[B]`
[accessible:  true] `method toList=> List[B]`
[accessible:  true] `method toMap[T, U](implicit ev: <:<[B,(T, U)])scala.collection.immutable.Map[T,U]`
[accessible:  true] `method toSeq=> Seq[B]`
[accessible:  true] `method toSet[B >: B]=> scala.collection.immutable.Set[B]`
[accessible:  true] `method toStream=> scala.collection.immutable.Stream[B]`
[accessible:  true] `method toString()String`
[accessible:  true] `method toTraversable=> Traversable[B]`
[accessible:  true] `method toVector=> Vector[B]`
[accessible:  true] `method to[Col[_]](implicit cbf: scala.collection.generic.CanBuildFrom[Nothing,B,Col[B]])Col[B]`
[accessible:  true] `method wait()Unit`
[accessible:  true] `method wait(x$1: Long)Unit`
[accessible:  true] `method wait(x$1: Long, x$2: Int)Unit`
[accessible:  true] `method withFilter(p: B => Boolean)Iterator[B]`
[accessible:  true] `method x=> java.util.Iterator[B]`
[accessible:  true] `method zipAll[B, A1 >: B, B1 >: B](that: Iterator[B], thisElem: A1, thatElem: B1)Iterator[(A1, B1)]`
[accessible:  true] `method zipWithIndex=> Iterator[(B, Int)]`
[accessible:  true] `method zip[B](that: Iterator[B])Iterator[(B, B)]`
[accessible:  true] `method â†’[B](y: B)(java.util.Iterator[B], B)`
[accessible:  true] `value __leftOfArrowjava.util.Iterator[B]`
[accessible:  true] `value __resultOfEnsuringjava.util.Iterator[B]`
[accessible:  true] `value selfAny`
[accessible: false] `method clone()Object`
[accessible: false] `method finalize()Unit`
[accessible: false] `method reversed=> List[B]`
================================================================================
