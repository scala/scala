reload: Actor.scala, ActorRef.scala, ActorRegistry.scala, Actors.java, Address.scala, AkkaException.scala, AkkaLoader.scala, Bootable.scala, BootableActorLoaderService.scala, BoundedBlockingQueue.scala, Config.scala, ConfigParser.scala, Configuration.scala, Configurator.scala, Crypt.scala, DataFlow.scala, Dispatchers.scala, Duration.scala, EventHandler.scala, ExecutorBasedEventDrivenDispatcher.scala, ExecutorBasedEventDrivenWorkStealingDispatcher.scala, FSM.scala, Future.scala, HashCode.scala, Helpers.scala, Hex.java, Importer.scala, Iterators.scala, JavaAPI.scala, JavaEventHandler.java, ListenerManagement.scala, Listeners.scala, LockUtil.scala, MACAddressParser.java, MailboxHandling.scala, MessageHandling.scala, Pool.scala, ReflectiveAccess.scala, RemoteEventHandler.scala, RemoteInterface.scala, Routers.scala, Routing.scala, Scheduler.scala, SupervisionConfig.scala, Supervisor.scala, ThreadBasedDispatcher.scala, ThreadPoolBuilder.scala, UUID.java, UUIDGen.java, UUIDHelper.java, UUIDHolder.java, UntypedActor.scala, package.scala, package.scala, pi.scala

askTypeCompletion at pi.scala(52,59)
================================================================================
[response] aksTypeCompletion at (52,59)
retrieved 0 members

================================================================================

askTypeCompletion at pi.scala(55,25)
================================================================================
[response] aksTypeCompletion at (55,25)
retrieved 45 members
`class Broadcastakka.routing.Routing.Broadcast`
`method !=(x$1: Any)Boolean`
`method !=(x$1: AnyRef)Boolean`
`method ##()Int`
`method +(other: String)String`
`method ->[B](y: B)(akka.routing.Routing.type, B)`
`method ==(x$1: Any)Boolean`
`method ==(x$1: AnyRef)Boolean`
`method asInstanceOf[T0]=> T0`
`method clone()Object`
`method dispatcherActor(routing: akka.routing.Routing.PF[Any,akka.actor.ActorRef])akka.actor.ActorRef`
`method dispatcherActor(routing: akka.routing.Routing.PF[Any,akka.actor.ActorRef], msgTransformer: Any => Any)akka.actor.ActorRef`
`method ensuring(cond: Boolean)akka.routing.Routing.type`
`method ensuring(cond: Boolean, msg: => Any)akka.routing.Routing.type`
`method ensuring(cond: akka.routing.Routing.type => Boolean)akka.routing.Routing.type`
`method ensuring(cond: akka.routing.Routing.type => Boolean, msg: => Any)akka.routing.Routing.type`
`method eq(x$1: AnyRef)Boolean`
`method equals(x$1: Any)Boolean`
`method filter[A, B](filter: akka.routing.Routing.PF[A,Unit], filtered: akka.routing.Routing.PF[A,B])akka.routing.Routing.PF[A,B]`
`method finalize()Unit`
`method formatted(fmtstr: String)String`
`method hashCode()Int`
`method intercept[A, B](interceptor: A => Unit, interceptee: akka.routing.Routing.PF[A,B])akka.routing.Routing.PF[A,B]`
`method isInstanceOf[T0]=> Boolean`
`method loadBalancerActor(actors: => akka.routing.InfiniteIterator[akka.actor.ActorRef])akka.actor.ActorRef`
`method loggerActor(actorToLog: akka.actor.ActorRef, logger: Any => Unit)akka.actor.ActorRef`
`method ne(x$1: AnyRef)Boolean`
`method notify()Unit`
`method notifyAll()Unit`
`method synchronized[T0](x$1: T0)T0`
`method toString()String`
`method wait()Unit`
`method wait(x$1: Long)Unit`
`method wait(x$1: Long, x$2: Int)Unit`
`method x=> akka.routing.Routing.type`
`method â†’[B](y: B)(akka.routing.Routing.type, B)`
`trait RoutingMessageakka.routing.Routing.RoutingMessage`
`type PFakka.routing.Routing.PF`
`value __leftOfArrowakka.routing.Routing.type`
`value __resultOfEnsuringakka.routing.Routing.type`
`value selfAny`
================================================================================

askTypeCompletion at pi.scala(55,73)
================================================================================
[response] aksTypeCompletion at (55,73)
retrieved 131 members
`method !!![T](message: Any, timeout: Long)(implicit sender: Option[akka.actor.ActorRef])akka.dispatch.Future[T]`
`method !!(message: Any, timeout: Long)(implicit sender: Option[akka.actor.ActorRef])Option[Any]`
`method !(message: Any)(implicit sender: Option[akka.actor.ActorRef])Unit`
`method !=(x$1: Any)Boolean`
`method !=(x$1: AnyRef)Boolean`
`method ##()Int`
`method +(other: String)String`
`method ->[B](y: B)(akka.actor.ActorRef, B)`
`method ==(x$1: Any)Boolean`
`method ==(x$1: AnyRef)Boolean`
`method actor=> akka.actor.Actor`
`method actorClass=> Class[_ <: akka.actor.Actor]`
`method actorClassName=> String`
`method actorInstance=> java.util.concurrent.atomic.AtomicReference[akka.actor.Actor]`
`method asInstanceOf[T0]=> T0`
`method channel=> akka.actor.Channel[Any]`
`method clone()Object`
`method compareTo(other: akka.actor.ActorRef)Int`
`method dispatcher=> akka.dispatch.MessageDispatcher`
`method dispatcher_=(md: akka.dispatch.MessageDispatcher)Unit`
`method ensuring(cond: Boolean)akka.actor.ActorRef`
`method ensuring(cond: Boolean, msg: => Any)akka.actor.ActorRef`
`method ensuring(cond: akka.actor.ActorRef => Boolean)akka.actor.ActorRef`
`method ensuring(cond: akka.actor.ActorRef => Boolean, msg: => Any)akka.actor.ActorRef`
`method eq(x$1: AnyRef)Boolean`
`method equals(that: Any)Boolean`
`method exit()Unit`
`method finalize()Unit`
`method formatted(fmtstr: String)String`
`method forward(message: Any)(implicit sender: Some[akka.actor.ActorRef])Any`
`method forward(message: AnyRef, sender: akka.actor.ActorRef)Unit`
`method getActorClass()Class[_ <: akka.actor.Actor]`
`method getActorClassName()String`
`method getChannel=> akka.actor.Channel[Any]`
`method getDispatcher()akka.dispatch.MessageDispatcher`
`method getFaultHandler()akka.config.Supervision.FaultHandlingStrategy`
`method getHomeAddress()java.net.InetSocketAddress`
`method getId()String`
`method getLifeCycle()akka.config.Supervision.LifeCycle`
`method getLinkedActors()java.util.Map[akka.actor.Uuid,akka.actor.ActorRef]`
`method getMailboxSize()Int`
`method getReceiveTimeout()Option[Long]`
`method getSender()Option[akka.actor.ActorRef]`
`method getSenderFuture()Option[akka.dispatch.CompletableFuture[Any]]`
`method getSupervisor()akka.actor.ActorRef`
`method getTimeout()Long`
`method getUuid()akka.actor.Uuid`
`method handleTrapExit(dead: akka.actor.ActorRef, reason: Throwable)Unit`
`method hashCode()Int`
`method homeAddress=> Option[java.net.InetSocketAddress]`
`method id=> String`
`method id_=(id: String)Unit`
`method invoke(messageHandle: akka.dispatch.MessageInvocation)Unit`
`method isBeingRestarted=> Boolean`
`method isDefinedAt(message: Any)Boolean`
`method isInstanceOf[T0]=> Boolean`
`method isRunning=> Boolean`
`method isShutdown=> Boolean`
`method isUnstarted=> Boolean`
`method link(actorRef: akka.actor.ActorRef)Unit`
`method linkedActors=> java.util.Map[akka.actor.Uuid,akka.actor.ActorRef]`
`method mailbox=> AnyRef`
`method mailboxSize=> Int`
`method mailbox_=(value: AnyRef)AnyRef`
`method ne(x$1: AnyRef)Boolean`
`method notify()Unit`
`method notifyAll()Unit`
`method postMessageToMailbox(message: Any, senderOption: Option[akka.actor.ActorRef])Unit`
`method postMessageToMailboxAndCreateFutureResultWithTimeout[T](message: Any, timeout: Long, senderOption: Option[akka.actor.ActorRef], senderFuture: Option[akka.dispatch.CompletableFuture[T]])akka.dispatch.CompletableFuture[T]`
`method registerSupervisorAsRemoteActor=> Option[akka.actor.Uuid]`
`method reply(message: Any)Unit`
`method replySafe(message: AnyRef)Boolean`
`method replyUnsafe(message: AnyRef)Unit`
`method reply_?(message: Any)Boolean`
`method restart(reason: Throwable, maxNrOfRetries: Option[Int], withinTimeRange: Option[Int])Unit`
`method restartLinkedActors(reason: Throwable, maxNrOfRetries: Option[Int], withinTimeRange: Option[Int])Unit`
`method sendOneWay(message: AnyRef)Unit`
`method sendOneWay(message: AnyRef, sender: akka.actor.ActorRef)Unit`
`method sendRequestReply(message: AnyRef)AnyRef`
`method sendRequestReply(message: AnyRef, sender: akka.actor.ActorRef)AnyRef`
`method sendRequestReply(message: AnyRef, timeout: Long, sender: akka.actor.ActorRef)AnyRef`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef)akka.dispatch.Future[T]`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef, sender: akka.actor.ActorRef)akka.dispatch.Future[T]`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef, timeout: Long, sender: akka.actor.ActorRef)akka.dispatch.Future[T]`
`method sender=> Option[akka.actor.ActorRef]`
`method senderFuture()Option[akka.dispatch.CompletableFuture[Any]]`
`method setDispatcher(dispatcher: akka.dispatch.MessageDispatcher)Unit`
`method setFaultHandler(handler: akka.config.Supervision.FaultHandlingStrategy)Unit`
`method setId(x$1: String)Unit`
`method setLifeCycle(lifeCycle: akka.config.Supervision.LifeCycle)Unit`
`method setReceiveTimeout(timeout: Long)Unit`
`method setTimeout(x$1: Long)Unit`
`method spawn(clazz: Class[_ <: akka.actor.Actor])akka.actor.ActorRef`
`method spawnLink(clazz: Class[_ <: akka.actor.Actor])akka.actor.ActorRef`
`method spawnLinkRemote(clazz: Class[_ <: akka.actor.Actor], hostname: String, port: Int, timeout: Long)akka.actor.ActorRef`
`method spawnLinkRemote[T <: akka.actor.Actor](hostname: String, port: Int, timeout: Long)(implicit evidence$4: ClassTag[T])akka.actor.ActorRef`
`method spawnLink[T <: akka.actor.Actor](implicit evidence$3: ClassTag[T])akka.actor.ActorRef`
`method spawnRemote(clazz: Class[_ <: akka.actor.Actor], hostname: String, port: Int, timeout: Long)akka.actor.ActorRef`
`method spawnRemote[T <: akka.actor.Actor](hostname: String, port: Int, timeout: Long)(implicit evidence$2: ClassTag[T])akka.actor.ActorRef`
`method spawn[T <: akka.actor.Actor](implicit evidence$1: ClassTag[T])akka.actor.ActorRef`
`method start()akka.actor.ActorRef`
`method startLink(actorRef: akka.actor.ActorRef)Unit`
`method stop()Unit`
`method supervisor=> Option[akka.actor.ActorRef]`
`method supervisor_=(sup: Option[akka.actor.ActorRef])Unit`
`method synchronized[T0](x$1: T0)T0`
`method toString()String`
`method unlink(actorRef: akka.actor.ActorRef)Unit`
`method uuid=> akka.actor.Uuid`
`method uuid_=(uid: akka.actor.Uuid)Unit`
`method wait()Unit`
`method wait(x$1: Long)Unit`
`method wait(x$1: Long, x$2: Int)Unit`
`method x=> akka.actor.ActorRef`
`method â†’[B](y: B)(akka.actor.ActorRef, B)`
`value __leftOfArrowakka.actor.ActorRef`
`value __resultOfEnsuringakka.actor.ActorRef`
`value selfAny`
`variable _statusakka.actor.ActorRefInternals.StatusType`
`variable _uuidakka.actor.Uuid`
`variable currentMessageakka.dispatch.MessageInvocation`
`variable faultHandlerakka.config.Supervision.FaultHandlingStrategy`
`variable hotswapscala.collection.immutable.Stack[PartialFunction[Any,Unit]]`
`variable idString`
`variable lifeCycleakka.config.Supervision.LifeCycle`
`variable receiveTimeoutOption[Long]`
`variable timeoutLong`
================================================================================

askTypeCompletion at pi.scala(65,15)
================================================================================
[response] aksTypeCompletion at (65,15)
retrieved 131 members
`method !!![T](message: Any, timeout: Long)(implicit sender: Option[akka.actor.ActorRef])akka.dispatch.Future[T]`
`method !!(message: Any, timeout: Long)(implicit sender: Option[akka.actor.ActorRef])Option[Any]`
`method !(message: Any)(implicit sender: Option[akka.actor.ActorRef])Unit`
`method !=(x$1: Any)Boolean`
`method !=(x$1: AnyRef)Boolean`
`method ##()Int`
`method +(other: String)String`
`method ->[B](y: B)(akka.actor.ActorRef, B)`
`method ==(x$1: Any)Boolean`
`method ==(x$1: AnyRef)Boolean`
`method actor=> akka.actor.Actor`
`method actorClass=> Class[_ <: akka.actor.Actor]`
`method actorClassName=> String`
`method actorInstance=> java.util.concurrent.atomic.AtomicReference[akka.actor.Actor]`
`method asInstanceOf[T0]=> T0`
`method channel=> akka.actor.Channel[Any]`
`method clone()Object`
`method compareTo(other: akka.actor.ActorRef)Int`
`method dispatcher=> akka.dispatch.MessageDispatcher`
`method dispatcher_=(md: akka.dispatch.MessageDispatcher)Unit`
`method ensuring(cond: Boolean)akka.actor.ActorRef`
`method ensuring(cond: Boolean, msg: => Any)akka.actor.ActorRef`
`method ensuring(cond: akka.actor.ActorRef => Boolean)akka.actor.ActorRef`
`method ensuring(cond: akka.actor.ActorRef => Boolean, msg: => Any)akka.actor.ActorRef`
`method eq(x$1: AnyRef)Boolean`
`method equals(that: Any)Boolean`
`method exit()Unit`
`method finalize()Unit`
`method formatted(fmtstr: String)String`
`method forward(message: Any)(implicit sender: Some[akka.actor.ActorRef])Any`
`method forward(message: AnyRef, sender: akka.actor.ActorRef)Unit`
`method getActorClass()Class[_ <: akka.actor.Actor]`
`method getActorClassName()String`
`method getChannel=> akka.actor.Channel[Any]`
`method getDispatcher()akka.dispatch.MessageDispatcher`
`method getFaultHandler()akka.config.Supervision.FaultHandlingStrategy`
`method getHomeAddress()java.net.InetSocketAddress`
`method getId()String`
`method getLifeCycle()akka.config.Supervision.LifeCycle`
`method getLinkedActors()java.util.Map[akka.actor.Uuid,akka.actor.ActorRef]`
`method getMailboxSize()Int`
`method getReceiveTimeout()Option[Long]`
`method getSender()Option[akka.actor.ActorRef]`
`method getSenderFuture()Option[akka.dispatch.CompletableFuture[Any]]`
`method getSupervisor()akka.actor.ActorRef`
`method getTimeout()Long`
`method getUuid()akka.actor.Uuid`
`method handleTrapExit(dead: akka.actor.ActorRef, reason: Throwable)Unit`
`method hashCode()Int`
`method homeAddress=> Option[java.net.InetSocketAddress]`
`method id=> String`
`method id_=(id: String)Unit`
`method invoke(messageHandle: akka.dispatch.MessageInvocation)Unit`
`method isBeingRestarted=> Boolean`
`method isDefinedAt(message: Any)Boolean`
`method isInstanceOf[T0]=> Boolean`
`method isRunning=> Boolean`
`method isShutdown=> Boolean`
`method isUnstarted=> Boolean`
`method link(actorRef: akka.actor.ActorRef)Unit`
`method linkedActors=> java.util.Map[akka.actor.Uuid,akka.actor.ActorRef]`
`method mailbox=> AnyRef`
`method mailboxSize=> Int`
`method mailbox_=(value: AnyRef)AnyRef`
`method ne(x$1: AnyRef)Boolean`
`method notify()Unit`
`method notifyAll()Unit`
`method postMessageToMailbox(message: Any, senderOption: Option[akka.actor.ActorRef])Unit`
`method postMessageToMailboxAndCreateFutureResultWithTimeout[T](message: Any, timeout: Long, senderOption: Option[akka.actor.ActorRef], senderFuture: Option[akka.dispatch.CompletableFuture[T]])akka.dispatch.CompletableFuture[T]`
`method registerSupervisorAsRemoteActor=> Option[akka.actor.Uuid]`
`method reply(message: Any)Unit`
`method replySafe(message: AnyRef)Boolean`
`method replyUnsafe(message: AnyRef)Unit`
`method reply_?(message: Any)Boolean`
`method restart(reason: Throwable, maxNrOfRetries: Option[Int], withinTimeRange: Option[Int])Unit`
`method restartLinkedActors(reason: Throwable, maxNrOfRetries: Option[Int], withinTimeRange: Option[Int])Unit`
`method sendOneWay(message: AnyRef)Unit`
`method sendOneWay(message: AnyRef, sender: akka.actor.ActorRef)Unit`
`method sendRequestReply(message: AnyRef)AnyRef`
`method sendRequestReply(message: AnyRef, sender: akka.actor.ActorRef)AnyRef`
`method sendRequestReply(message: AnyRef, timeout: Long, sender: akka.actor.ActorRef)AnyRef`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef)akka.dispatch.Future[T]`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef, sender: akka.actor.ActorRef)akka.dispatch.Future[T]`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef, timeout: Long, sender: akka.actor.ActorRef)akka.dispatch.Future[T]`
`method sender=> Option[akka.actor.ActorRef]`
`method senderFuture()Option[akka.dispatch.CompletableFuture[Any]]`
`method setDispatcher(dispatcher: akka.dispatch.MessageDispatcher)Unit`
`method setFaultHandler(handler: akka.config.Supervision.FaultHandlingStrategy)Unit`
`method setId(x$1: String)Unit`
`method setLifeCycle(lifeCycle: akka.config.Supervision.LifeCycle)Unit`
`method setReceiveTimeout(timeout: Long)Unit`
`method setTimeout(x$1: Long)Unit`
`method spawn(clazz: Class[_ <: akka.actor.Actor])akka.actor.ActorRef`
`method spawnLink(clazz: Class[_ <: akka.actor.Actor])akka.actor.ActorRef`
`method spawnLinkRemote(clazz: Class[_ <: akka.actor.Actor], hostname: String, port: Int, timeout: Long)akka.actor.ActorRef`
`method spawnLinkRemote[T <: akka.actor.Actor](hostname: String, port: Int, timeout: Long)(implicit evidence$4: ClassTag[T])akka.actor.ActorRef`
`method spawnLink[T <: akka.actor.Actor](implicit evidence$3: ClassTag[T])akka.actor.ActorRef`
`method spawnRemote(clazz: Class[_ <: akka.actor.Actor], hostname: String, port: Int, timeout: Long)akka.actor.ActorRef`
`method spawnRemote[T <: akka.actor.Actor](hostname: String, port: Int, timeout: Long)(implicit evidence$2: ClassTag[T])akka.actor.ActorRef`
`method spawn[T <: akka.actor.Actor](implicit evidence$1: ClassTag[T])akka.actor.ActorRef`
`method start()akka.actor.ActorRef`
`method startLink(actorRef: akka.actor.ActorRef)Unit`
`method stop()Unit`
`method supervisor=> Option[akka.actor.ActorRef]`
`method supervisor_=(sup: Option[akka.actor.ActorRef])Unit`
`method synchronized[T0](x$1: T0)T0`
`method toString()String`
`method unlink(actorRef: akka.actor.ActorRef)Unit`
`method uuid=> akka.actor.Uuid`
`method uuid_=(uid: akka.actor.Uuid)Unit`
`method wait()Unit`
`method wait(x$1: Long)Unit`
`method wait(x$1: Long, x$2: Int)Unit`
`method x=> akka.actor.ActorRef`
`method â†’[B](y: B)(akka.actor.ActorRef, B)`
`value __leftOfArrowakka.actor.ActorRef`
`value __resultOfEnsuringakka.actor.ActorRef`
`value selfAny`
`variable _statusakka.actor.ActorRefInternals.StatusType`
`variable _uuidakka.actor.Uuid`
`variable currentMessageakka.dispatch.MessageInvocation`
`variable faultHandlerakka.config.Supervision.FaultHandlingStrategy`
`variable hotswapscala.collection.immutable.Stack[PartialFunction[Any,Unit]]`
`variable idString`
`variable lifeCycleakka.config.Supervision.LifeCycle`
`variable receiveTimeoutOption[Long]`
`variable timeoutLong`
================================================================================

askTypeCompletion at pi.scala(74,46)
================================================================================
[response] aksTypeCompletion at (74,46)
retrieved 131 members
`method !!![T](message: Any, timeout: Long)(implicit sender: Option[akka.actor.ActorRef])akka.dispatch.Future[T]`
`method !!(message: Any, timeout: Long)(implicit sender: Option[akka.actor.ActorRef])Option[Any]`
`method !(message: Any)(implicit sender: Option[akka.actor.ActorRef])Unit`
`method !=(x$1: Any)Boolean`
`method !=(x$1: AnyRef)Boolean`
`method ##()Int`
`method +(other: String)String`
`method ->[B](y: B)(akka.actor.ScalaActorRef, B)`
`method ==(x$1: Any)Boolean`
`method ==(x$1: AnyRef)Boolean`
`method actor=> akka.actor.Actor`
`method actorClass=> Class[_ <: akka.actor.Actor]`
`method actorClassName=> String`
`method actorInstance=> java.util.concurrent.atomic.AtomicReference[akka.actor.Actor]`
`method asInstanceOf[T0]=> T0`
`method channel=> akka.actor.Channel[Any]`
`method clone()Object`
`method compareTo(other: akka.actor.ActorRef)Int`
`method dispatcher=> akka.dispatch.MessageDispatcher`
`method dispatcher_=(md: akka.dispatch.MessageDispatcher)Unit`
`method ensuring(cond: Boolean)akka.actor.ScalaActorRef`
`method ensuring(cond: Boolean, msg: => Any)akka.actor.ScalaActorRef`
`method ensuring(cond: akka.actor.ScalaActorRef => Boolean)akka.actor.ScalaActorRef`
`method ensuring(cond: akka.actor.ScalaActorRef => Boolean, msg: => Any)akka.actor.ScalaActorRef`
`method eq(x$1: AnyRef)Boolean`
`method equals(x$1: Any)Boolean`
`method exit()Unit`
`method finalize()Unit`
`method formatted(fmtstr: String)String`
`method forward(message: Any)(implicit sender: Some[akka.actor.ActorRef])Any`
`method forward(message: AnyRef, sender: akka.actor.ActorRef)Unit`
`method getActorClass()Class[_ <: akka.actor.Actor]`
`method getActorClassName()String`
`method getChannel=> akka.actor.Channel[Any]`
`method getDispatcher()akka.dispatch.MessageDispatcher`
`method getFaultHandler()akka.config.Supervision.FaultHandlingStrategy`
`method getHomeAddress()java.net.InetSocketAddress`
`method getId()String`
`method getLifeCycle()akka.config.Supervision.LifeCycle`
`method getLinkedActors()java.util.Map[akka.actor.Uuid,akka.actor.ActorRef]`
`method getMailboxSize()Int`
`method getReceiveTimeout()Option[Long]`
`method getSender()Option[akka.actor.ActorRef]`
`method getSenderFuture()Option[akka.dispatch.CompletableFuture[Any]]`
`method getSupervisor()akka.actor.ActorRef`
`method getTimeout()Long`
`method getUuid()akka.actor.Uuid`
`method handleTrapExit(dead: akka.actor.ActorRef, reason: Throwable)Unit`
`method hashCode()Int`
`method homeAddress=> Option[java.net.InetSocketAddress]`
`method id=> String`
`method id_=(id: String)Unit`
`method invoke(messageHandle: akka.dispatch.MessageInvocation)Unit`
`method isBeingRestarted=> Boolean`
`method isDefinedAt(message: Any)Boolean`
`method isInstanceOf[T0]=> Boolean`
`method isRunning=> Boolean`
`method isShutdown=> Boolean`
`method isUnstarted=> Boolean`
`method link(actorRef: akka.actor.ActorRef)Unit`
`method linkedActors=> java.util.Map[akka.actor.Uuid,akka.actor.ActorRef]`
`method mailbox=> AnyRef`
`method mailboxSize=> Int`
`method mailbox_=(value: AnyRef)AnyRef`
`method ne(x$1: AnyRef)Boolean`
`method notify()Unit`
`method notifyAll()Unit`
`method postMessageToMailbox(message: Any, senderOption: Option[akka.actor.ActorRef])Unit`
`method postMessageToMailboxAndCreateFutureResultWithTimeout[T](message: Any, timeout: Long, senderOption: Option[akka.actor.ActorRef], senderFuture: Option[akka.dispatch.CompletableFuture[T]])akka.dispatch.CompletableFuture[T]`
`method registerSupervisorAsRemoteActor=> Option[akka.actor.Uuid]`
`method reply(message: Any)Unit`
`method replySafe(message: AnyRef)Boolean`
`method replyUnsafe(message: AnyRef)Unit`
`method reply_?(message: Any)Boolean`
`method restart(reason: Throwable, maxNrOfRetries: Option[Int], withinTimeRange: Option[Int])Unit`
`method restartLinkedActors(reason: Throwable, maxNrOfRetries: Option[Int], withinTimeRange: Option[Int])Unit`
`method sendOneWay(message: AnyRef)Unit`
`method sendOneWay(message: AnyRef, sender: akka.actor.ActorRef)Unit`
`method sendRequestReply(message: AnyRef)AnyRef`
`method sendRequestReply(message: AnyRef, sender: akka.actor.ActorRef)AnyRef`
`method sendRequestReply(message: AnyRef, timeout: Long, sender: akka.actor.ActorRef)AnyRef`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef)akka.dispatch.Future[T]`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef, sender: akka.actor.ActorRef)akka.dispatch.Future[T]`
`method sendRequestReplyFuture[T <: AnyRef](message: AnyRef, timeout: Long, sender: akka.actor.ActorRef)akka.dispatch.Future[T]`
`method sender=> Option[akka.actor.ActorRef]`
`method senderFuture()Option[akka.dispatch.CompletableFuture[Any]]`
`method setDispatcher(dispatcher: akka.dispatch.MessageDispatcher)Unit`
`method setFaultHandler(x$1: akka.config.Supervision.FaultHandlingStrategy)Unit`
`method setId(x$1: String)Unit`
`method setLifeCycle(x$1: akka.config.Supervision.LifeCycle)Unit`
`method setReceiveTimeout(timeout: Long)Unit`
`method setTimeout(x$1: Long)Unit`
`method spawn(clazz: Class[_ <: akka.actor.Actor])akka.actor.ActorRef`
`method spawnLink(clazz: Class[_ <: akka.actor.Actor])akka.actor.ActorRef`
`method spawnLinkRemote(clazz: Class[_ <: akka.actor.Actor], hostname: String, port: Int, timeout: Long)akka.actor.ActorRef`
`method spawnLinkRemote[T <: akka.actor.Actor](hostname: String, port: Int, timeout: Long)(implicit evidence$4: ClassTag[T])akka.actor.ActorRef`
`method spawnLink[T <: akka.actor.Actor](implicit evidence$3: ClassTag[T])akka.actor.ActorRef`
`method spawnRemote(clazz: Class[_ <: akka.actor.Actor], hostname: String, port: Int, timeout: Long)akka.actor.ActorRef`
`method spawnRemote[T <: akka.actor.Actor](hostname: String, port: Int, timeout: Long)(implicit evidence$2: ClassTag[T])akka.actor.ActorRef`
`method spawn[T <: akka.actor.Actor](implicit evidence$1: ClassTag[T])akka.actor.ActorRef`
`method start()akka.actor.ActorRef`
`method startLink(actorRef: akka.actor.ActorRef)Unit`
`method stop()Unit`
`method supervisor=> Option[akka.actor.ActorRef]`
`method supervisor_=(sup: Option[akka.actor.ActorRef])Unit`
`method synchronized[T0](x$1: T0)T0`
`method toString()String`
`method unlink(actorRef: akka.actor.ActorRef)Unit`
`method uuid=> akka.actor.Uuid`
`method uuid_=(uid: akka.actor.Uuid)Unit`
`method wait()Unit`
`method wait(x$1: Long)Unit`
`method wait(x$1: Long, x$2: Int)Unit`
`method x=> akka.actor.ScalaActorRef`
`method â†’[B](y: B)(akka.actor.ScalaActorRef, B)`
`value __leftOfArrowakka.actor.ScalaActorRef`
`value __resultOfEnsuringakka.actor.ScalaActorRef`
`value selfAny`
`variable _statusakka.actor.ActorRefInternals.StatusType`
`variable _uuidakka.actor.Uuid`
`variable currentMessageakka.dispatch.MessageInvocation`
`variable faultHandlerakka.config.Supervision.FaultHandlingStrategy`
`variable hotswapscala.collection.immutable.Stack[PartialFunction[Any,Unit]]`
`variable idString`
`variable lifeCycleakka.config.Supervision.LifeCycle`
`variable receiveTimeoutOption[Long]`
`variable timeoutLong`
================================================================================

askType at pi.scala(34,16)
================================================================================
[response] askTypeAt at (34,16)
def receive: PartialFunction[Any,Unit] = ((x0$3: Any) => x0$3 match {
  case (start: Int, nrOfElements: Int)Pi.Work((start @ _), (nrOfElements @ _)) => Worker.this.self.reply(Pi.this.Result.apply(Worker.this.calculatePiFor(start, nrOfElements)))
})
================================================================================

askHyperlinkPos for `calculate` at (11,11) pi.scala
================================================================================
[response] found askHyperlinkPos for `calculate` at (93,7) pi.scala
================================================================================

askHyperlinkPos for `PiMessage` at (17,41) pi.scala
================================================================================
[response] found askHyperlinkPos for `PiMessage` at (16,16) pi.scala
================================================================================

askHyperlinkPos for `Actor` at (24,28) pi.scala
================================================================================
[response] found askHyperlinkPos for `Actor` at (289,7) Actor.scala
================================================================================

askHyperlinkPos for `reply` at (36,18) pi.scala
================================================================================
[response] found askHyperlinkPos for `reply` at (1382,7) ActorRef.scala
================================================================================

askHyperlinkPos for `nrOfResults` at (73,19) pi.scala
================================================================================
[response] found askHyperlinkPos for `nrOfResults` at (48,9) pi.scala
================================================================================

askHyperlinkPos for `latch` at (86,11) pi.scala
================================================================================
[response] found askHyperlinkPos for `latch` at (44,61) pi.scala
================================================================================
