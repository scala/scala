/* NSC -- new Scala compiler
 * Copyright 2005-2013 LAMP/EPFL
 */

package scala
package reflect
package internal

trait StdLiftables {
  self: SymbolTable =>
  import build.{SyntacticTuple, ScalaDot}

  private def lift[T: Liftable](value: T): Tree = implicitly[Liftable[T]].apply(value)
  private def unlift[T: Unliftable](value: Tree): Option[T] = implicitly[Unliftable[T]].unapply(value)
  private def selectScala(names: Name*) = names.tail.foldLeft(gen.scalaDot(names.head)) { Select(_, _) }
  private def callScala(names: Name*)(args: List[Tree]) = Apply(selectScala(names: _*), args)
  private def callCollection(name: Name)(args: List[Tree]) = callScala(nme.collection, nme.immutable, name)(args)

  // --------- Isomorphisms ---------

  private trait Iso[T] extends Liftable[T] with Unliftable[T]
  private class PrimitiveIso[Unboxed: ClassTag, Boxed: ClassTag] extends Iso[Unboxed] {
    def apply(value: Unboxed): Tree = Literal(Constant(value))
    def unapply(tree: Tree): Option[Unboxed] = tree match {
      case Literal(Constant(value))
        if value.getClass == implicitly[ClassTag[Boxed]].runtimeClass
        || value.getClass == implicitly[ClassTag[Unboxed]].runtimeClass =>
        Some(value.asInstanceOf[Unboxed])
      case _ => None
    }
  }

  implicit lazy val isoByte: Liftable[Byte] with Unliftable[Byte] = new PrimitiveIso[Byte, java.lang.Byte]
  implicit lazy val isoShort: Liftable[Short] with Unliftable[Short] = new PrimitiveIso[Short, java.lang.Short]
  implicit lazy val isoChar: Liftable[Char] with Unliftable[Char] = new PrimitiveIso[Char, java.lang.Character]
  implicit lazy val isoInt: Liftable[Int] with Unliftable[Int] = new PrimitiveIso[Int, java.lang.Integer]
  implicit lazy val isoLong: Liftable[Long] with Unliftable[Long] = new PrimitiveIso[Long, java.lang.Long]
  implicit lazy val isoFloat: Liftable[Float] with Unliftable[Float] = new PrimitiveIso[Float, java.lang.Float]
  implicit lazy val isoDouble: Liftable[Double] with Unliftable[Double] = new PrimitiveIso[Double, java.lang.Double]
  implicit lazy val isoBoolean: Liftable[Boolean] with Unliftable[Boolean] = new PrimitiveIso[Boolean, java.lang.Boolean]
  implicit lazy val isoUnit: Liftable[Unit] with Unliftable[Unit] = new PrimitiveIso[Unit, scala.runtime.BoxedUnit]
  implicit lazy val isoString: Liftable[String] with Unliftable[String] = new PrimitiveIso[String, String]
  implicit lazy val isoScalaSymbol: Liftable[scala.Symbol] with Unliftable[scala.Symbol] = new Iso[scala.Symbol] {
    def apply(value: scala.Symbol): Tree = Apply(ScalaDot(nme.Symbol), List(Literal(Constant(value.name))))
    def unapply(tree: Tree): Option[scala.Symbol] = tree match {
      case Apply(ScalaDot(nme.Symbol), List(Literal(Constant(name: String)))) => Some(scala.Symbol(name))
      case _ => None
    }
  }

  // --------- Liftables ---------

  implicit def liftName[T <: Name]: Liftable[T] = Liftable { name => Ident(name) }
  implicit def liftExpr[T <: Expr[_]]: Liftable[T] = Liftable { expr => expr.tree }
  implicit def liftType[T <: Type]: Liftable[T] = Liftable { tpe => TypeTree(tpe) }
  implicit def liftTypeTag[T <: WeakTypeTag[_]]: Liftable[T] = Liftable { ttag => TypeTree(ttag.tpe) }
  implicit def liftConstant[T <: Constant]: Liftable[T] = Liftable { const => Literal(const) }

  implicit def liftArray[T: Liftable]: Liftable[Array[T]] = Liftable { arr => callScala(nme.Array)(arr.map(lift(_)).toList) }
  implicit def liftVector[T: Liftable]: Liftable[Vector[T]] = Liftable { vect => callCollection(nme.Vector)(vect.map(lift(_)).toList) }
  implicit def liftList[T: Liftable]: Liftable[List[T]] = Liftable { lst => callCollection(nme.List)(lst.map(lift(_))) }
  implicit def liftMap[K: Liftable, V: Liftable]: Liftable[Map[K, V]] = Liftable { m => callCollection(nme.Map)(m.toList.map(lift(_))) }
  implicit def liftSet[T: Liftable]: Liftable[Set[T]] = Liftable { s => callCollection(nme.Set)(s.toList.map(lift(_))) }
  implicit def liftOption[T: Liftable]: Liftable[Option[T]] = Liftable {
    case Some(v) => callScala(nme.Some)(lift(v) :: Nil)
    case None    => selectScala(nme.None)
  }
  implicit def liftEither[L: Liftable, R: Liftable]: Liftable[Either[L, R]] = Liftable {
    case Left(l) => callScala(nme.util, nme.Left)(lift(l) :: Nil)
    case Right(r) => callScala(nme.util, nme.Right)(lift(r) :: Nil)
  }

  implicit def liftTuple1[T1](implicit liftT1: Liftable[T1]): Liftable[Tuple1[T1]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: Nil)
  }
  implicit def liftTuple2[T1, T2](implicit liftT1: Liftable[T1], liftT2: Liftable[T2]): Liftable[Tuple2[T1, T2]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: Nil)
  }
  implicit def liftTuple3[T1, T2, T3](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3]): Liftable[Tuple3[T1, T2, T3]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: Nil)
  }
  implicit def liftTuple4[T1, T2, T3, T4](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4]): Liftable[Tuple4[T1, T2, T3, T4]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: Nil)
  }
  implicit def liftTuple5[T1, T2, T3, T4, T5](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5]): Liftable[Tuple5[T1, T2, T3, T4, T5]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: Nil)
  }
  implicit def liftTuple6[T1, T2, T3, T4, T5, T6](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6]): Liftable[Tuple6[T1, T2, T3, T4, T5, T6]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: Nil)
  }
  implicit def liftTuple7[T1, T2, T3, T4, T5, T6, T7](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7]): Liftable[Tuple7[T1, T2, T3, T4, T5, T6, T7]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: Nil)
  }
  implicit def liftTuple8[T1, T2, T3, T4, T5, T6, T7, T8](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8]): Liftable[Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: Nil)
  }
  implicit def liftTuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9]): Liftable[Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: Nil)
  }
  implicit def liftTuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10]): Liftable[Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: Nil)
  }
  implicit def liftTuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11]): Liftable[Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: Nil)
  }
  implicit def liftTuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12]): Liftable[Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: Nil)
  }
  implicit def liftTuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13]): Liftable[Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: Nil)
  }
  implicit def liftTuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14]): Liftable[Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: Nil)
  }
  implicit def liftTuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15]): Liftable[Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: Nil)
  }
  implicit def liftTuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15], liftT16: Liftable[T16]): Liftable[Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: liftT16(t._16) :: Nil)
  }
  implicit def liftTuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15], liftT16: Liftable[T16], liftT17: Liftable[T17]): Liftable[Tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: liftT16(t._16) :: liftT17(t._17) :: Nil)
  }
  implicit def liftTuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15], liftT16: Liftable[T16], liftT17: Liftable[T17], liftT18: Liftable[T18]): Liftable[Tuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: liftT16(t._16) :: liftT17(t._17) :: liftT18(t._18) :: Nil)
  }
  implicit def liftTuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15], liftT16: Liftable[T16], liftT17: Liftable[T17], liftT18: Liftable[T18], liftT19: Liftable[T19]): Liftable[Tuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: liftT16(t._16) :: liftT17(t._17) :: liftT18(t._18) :: liftT19(t._19) :: Nil)
  }
  implicit def liftTuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15], liftT16: Liftable[T16], liftT17: Liftable[T17], liftT18: Liftable[T18], liftT19: Liftable[T19], liftT20: Liftable[T20]): Liftable[Tuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: liftT16(t._16) :: liftT17(t._17) :: liftT18(t._18) :: liftT19(t._19) :: liftT20(t._20) :: Nil)
  }
  implicit def liftTuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15], liftT16: Liftable[T16], liftT17: Liftable[T17], liftT18: Liftable[T18], liftT19: Liftable[T19], liftT20: Liftable[T20], liftT21: Liftable[T21]): Liftable[Tuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: liftT16(t._16) :: liftT17(t._17) :: liftT18(t._18) :: liftT19(t._19) :: liftT20(t._20) :: liftT21(t._21) :: Nil)
  }
  implicit def liftTuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22](implicit liftT1: Liftable[T1], liftT2: Liftable[T2], liftT3: Liftable[T3], liftT4: Liftable[T4], liftT5: Liftable[T5], liftT6: Liftable[T6], liftT7: Liftable[T7], liftT8: Liftable[T8], liftT9: Liftable[T9], liftT10: Liftable[T10], liftT11: Liftable[T11], liftT12: Liftable[T12], liftT13: Liftable[T13], liftT14: Liftable[T14], liftT15: Liftable[T15], liftT16: Liftable[T16], liftT17: Liftable[T17], liftT18: Liftable[T18], liftT19: Liftable[T19], liftT20: Liftable[T20], liftT21: Liftable[T21], liftT22: Liftable[T22]): Liftable[Tuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]] = Liftable { t =>
    SyntacticTuple(liftT1(t._1) :: liftT2(t._2) :: liftT3(t._3) :: liftT4(t._4) :: liftT5(t._5) :: liftT6(t._6) :: liftT7(t._7) :: liftT8(t._8) :: liftT9(t._9) :: liftT10(t._10) :: liftT11(t._11) :: liftT12(t._12) :: liftT13(t._13) :: liftT14(t._14) :: liftT15(t._15) :: liftT16(t._16) :: liftT17(t._17) :: liftT18(t._18) :: liftT19(t._19) :: liftT20(t._20) :: liftT21(t._21) :: liftT22(t._22) :: Nil)
  }

  // --------- Unliftables ---------

  implicit def unliftName[T <: Name : ClassTag]: Unliftable[T] = Unliftable[T] { case Ident(name: T) => name }
  implicit def unliftType: Unliftable[Type] = Unliftable[Type] { case tt: TypeTree if tt.tpe != null => tt.tpe.asInstanceOf[Type] }
  implicit def unliftConstant: Unliftable[Constant] = Unliftable[Constant] { case Literal(const) => const.asInstanceOf[Constant] }

  implicit def unliftTuple1[T1](implicit unliftT1: Unliftable[T1]): Unliftable[Tuple1[T1]] = Unliftable {
    case SyntacticTuple(t1 :: Nil) if unliftT1.unapply(t1).nonEmpty => Tuple1(unliftT1.unapply(t1).get)
  }
  implicit def unliftTuple2[T1, T2](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2]): Unliftable[Tuple2[T1, T2]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty => Tuple2(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get)
  }
  implicit def unliftTuple3[T1, T2, T3](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3]): Unliftable[Tuple3[T1, T2, T3]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty => Tuple3(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get)
  }
  implicit def unliftTuple4[T1, T2, T3, T4](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4]): Unliftable[Tuple4[T1, T2, T3, T4]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty => Tuple4(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get)
  }
  implicit def unliftTuple5[T1, T2, T3, T4, T5](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5]): Unliftable[Tuple5[T1, T2, T3, T4, T5]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty => Tuple5(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get)
  }
  implicit def unliftTuple6[T1, T2, T3, T4, T5, T6](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6]): Unliftable[Tuple6[T1, T2, T3, T4, T5, T6]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty => Tuple6(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get)
  }
  implicit def unliftTuple7[T1, T2, T3, T4, T5, T6, T7](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7]): Unliftable[Tuple7[T1, T2, T3, T4, T5, T6, T7]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty => Tuple7(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get)
  }
  implicit def unliftTuple8[T1, T2, T3, T4, T5, T6, T7, T8](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8]): Unliftable[Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty => Tuple8(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get)
  }
  implicit def unliftTuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9]): Unliftable[Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty => Tuple9(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get)
  }
  implicit def unliftTuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10]): Unliftable[Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty => Tuple10(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get)
  }
  implicit def unliftTuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11]): Unliftable[Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty => Tuple11(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get)
  }
  implicit def unliftTuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12]): Unliftable[Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty => Tuple12(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get)
  }
  implicit def unliftTuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13]): Unliftable[Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty => Tuple13(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get)
  }
  implicit def unliftTuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14]): Unliftable[Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty => Tuple14(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get)
  }
  implicit def unliftTuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15]): Unliftable[Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty => Tuple15(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get)
  }
  implicit def unliftTuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15], unliftT16: Unliftable[T16]): Unliftable[Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: t16 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty && unliftT16.unapply(t16).nonEmpty => Tuple16(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get, unliftT16.unapply(t16).get)
  }
  implicit def unliftTuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15], unliftT16: Unliftable[T16], unliftT17: Unliftable[T17]): Unliftable[Tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: t16 :: t17 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty && unliftT16.unapply(t16).nonEmpty && unliftT17.unapply(t17).nonEmpty => Tuple17(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get, unliftT16.unapply(t16).get, unliftT17.unapply(t17).get)
  }
  implicit def unliftTuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15], unliftT16: Unliftable[T16], unliftT17: Unliftable[T17], unliftT18: Unliftable[T18]): Unliftable[Tuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: t16 :: t17 :: t18 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty && unliftT16.unapply(t16).nonEmpty && unliftT17.unapply(t17).nonEmpty && unliftT18.unapply(t18).nonEmpty => Tuple18(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get, unliftT16.unapply(t16).get, unliftT17.unapply(t17).get, unliftT18.unapply(t18).get)
  }
  implicit def unliftTuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15], unliftT16: Unliftable[T16], unliftT17: Unliftable[T17], unliftT18: Unliftable[T18], unliftT19: Unliftable[T19]): Unliftable[Tuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: t16 :: t17 :: t18 :: t19 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty && unliftT16.unapply(t16).nonEmpty && unliftT17.unapply(t17).nonEmpty && unliftT18.unapply(t18).nonEmpty && unliftT19.unapply(t19).nonEmpty => Tuple19(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get, unliftT16.unapply(t16).get, unliftT17.unapply(t17).get, unliftT18.unapply(t18).get, unliftT19.unapply(t19).get)
  }
  implicit def unliftTuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15], unliftT16: Unliftable[T16], unliftT17: Unliftable[T17], unliftT18: Unliftable[T18], unliftT19: Unliftable[T19], unliftT20: Unliftable[T20]): Unliftable[Tuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: t16 :: t17 :: t18 :: t19 :: t20 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty && unliftT16.unapply(t16).nonEmpty && unliftT17.unapply(t17).nonEmpty && unliftT18.unapply(t18).nonEmpty && unliftT19.unapply(t19).nonEmpty && unliftT20.unapply(t20).nonEmpty => Tuple20(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get, unliftT16.unapply(t16).get, unliftT17.unapply(t17).get, unliftT18.unapply(t18).get, unliftT19.unapply(t19).get, unliftT20.unapply(t20).get)
  }
  implicit def unliftTuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15], unliftT16: Unliftable[T16], unliftT17: Unliftable[T17], unliftT18: Unliftable[T18], unliftT19: Unliftable[T19], unliftT20: Unliftable[T20], unliftT21: Unliftable[T21]): Unliftable[Tuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: t16 :: t17 :: t18 :: t19 :: t20 :: t21 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty && unliftT16.unapply(t16).nonEmpty && unliftT17.unapply(t17).nonEmpty && unliftT18.unapply(t18).nonEmpty && unliftT19.unapply(t19).nonEmpty && unliftT20.unapply(t20).nonEmpty && unliftT21.unapply(t21).nonEmpty => Tuple21(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get, unliftT16.unapply(t16).get, unliftT17.unapply(t17).get, unliftT18.unapply(t18).get, unliftT19.unapply(t19).get, unliftT20.unapply(t20).get, unliftT21.unapply(t21).get)
  }
  implicit def unliftTuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22](implicit unliftT1: Unliftable[T1], unliftT2: Unliftable[T2], unliftT3: Unliftable[T3], unliftT4: Unliftable[T4], unliftT5: Unliftable[T5], unliftT6: Unliftable[T6], unliftT7: Unliftable[T7], unliftT8: Unliftable[T8], unliftT9: Unliftable[T9], unliftT10: Unliftable[T10], unliftT11: Unliftable[T11], unliftT12: Unliftable[T12], unliftT13: Unliftable[T13], unliftT14: Unliftable[T14], unliftT15: Unliftable[T15], unliftT16: Unliftable[T16], unliftT17: Unliftable[T17], unliftT18: Unliftable[T18], unliftT19: Unliftable[T19], unliftT20: Unliftable[T20], unliftT21: Unliftable[T21], unliftT22: Unliftable[T22]): Unliftable[Tuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]] = Unliftable {
    case SyntacticTuple(t1 :: t2 :: t3 :: t4 :: t5 :: t6 :: t7 :: t8 :: t9 :: t10 :: t11 :: t12 :: t13 :: t14 :: t15 :: t16 :: t17 :: t18 :: t19 :: t20 :: t21 :: t22 :: Nil) if unliftT1.unapply(t1).nonEmpty && unliftT2.unapply(t2).nonEmpty && unliftT3.unapply(t3).nonEmpty && unliftT4.unapply(t4).nonEmpty && unliftT5.unapply(t5).nonEmpty && unliftT6.unapply(t6).nonEmpty && unliftT7.unapply(t7).nonEmpty && unliftT8.unapply(t8).nonEmpty && unliftT9.unapply(t9).nonEmpty && unliftT10.unapply(t10).nonEmpty && unliftT11.unapply(t11).nonEmpty && unliftT12.unapply(t12).nonEmpty && unliftT13.unapply(t13).nonEmpty && unliftT14.unapply(t14).nonEmpty && unliftT15.unapply(t15).nonEmpty && unliftT16.unapply(t16).nonEmpty && unliftT17.unapply(t17).nonEmpty && unliftT18.unapply(t18).nonEmpty && unliftT19.unapply(t19).nonEmpty && unliftT20.unapply(t20).nonEmpty && unliftT21.unapply(t21).nonEmpty && unliftT22.unapply(t22).nonEmpty => Tuple22(unliftT1.unapply(t1).get, unliftT2.unapply(t2).get, unliftT3.unapply(t3).get, unliftT4.unapply(t4).get, unliftT5.unapply(t5).get, unliftT6.unapply(t6).get, unliftT7.unapply(t7).get, unliftT8.unapply(t8).get, unliftT9.unapply(t9).get, unliftT10.unapply(t10).get, unliftT11.unapply(t11).get, unliftT12.unapply(t12).get, unliftT13.unapply(t13).get, unliftT14.unapply(t14).get, unliftT15.unapply(t15).get, unliftT16.unapply(t16).get, unliftT17.unapply(t17).get, unliftT18.unapply(t18).get, unliftT19.unapply(t19).get, unliftT20.unapply(t20).get, unliftT21.unapply(t21).get, unliftT22.unapply(t22).get)
  }
}