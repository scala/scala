package scala.concurrent
package default



import java.util.concurrent.atomic.AtomicReferenceFieldUpdater
import scala.concurrent.forkjoin.{ ForkJoinPool, RecursiveAction, ForkJoinWorkerThread }
import scala.util.Try
import scala.util
import scala.concurrent.util.Duration
import scala.annotation.tailrec
import scala.util.control.NonFatal


private[concurrent] trait Completable[T] {
self: Future[T] =>
  
  val executor: ExecutionContextImpl

  def newPromise[S]: Promise[S] = executor promise
  
  type Callback = Try[T] => Any

  def getState: State[T]

  def casState(oldv: State[T], newv: State[T]): Boolean

  protected def dispatch[U](r: Runnable) = executionContext execute r
  
  protected def processCallbacks(cbs: List[Callback], r: Try[T]) =
    for (cb <- cbs) dispatch(new Runnable {
      override def run() = cb(r)
    })

  def future: Future[T] = self
  
  def onComplete[U](callback: Try[T] => U): this.type = {
    @tailrec def tryAddCallback(): Try[T] = {
      getState match {
        case p @ Pending(lst) =>
          val pt = p.asInstanceOf[Pending[T]]
          if (casState(pt, Pending(callback :: pt.callbacks))) null
          else tryAddCallback()
        case Success(res) => util.Success(res)
        case Failure(t) => util.Failure(t)
      }
    }
    
    val res = tryAddCallback()
    if (res != null) dispatch(new Runnable {
      override def run() =
        try callback(res)
        catch handledFutureException andThen {
          t => Console.err.println(t)
        }
    })
    
    this
  }
  
  def isTimedout: Boolean = getState match {
    case Failure(ft: FutureTimeoutException) => true
    case _ => false
  }
  
}

private[concurrent] class PromiseImpl[T](context: ExecutionContextImpl)
extends Promise[T] with Future[T] with Completable[T] {
 
  val executor: scala.concurrent.default.ExecutionContextImpl = context

  @volatile private var state: State[T] = _

  val updater = AtomicReferenceFieldUpdater.newUpdater(classOf[PromiseImpl[T]], classOf[State[T]], "state")

  updater.set(this, Pending(List()))
  
  def casState(oldv: State[T], newv: State[T]): Boolean = {
    updater.compareAndSet(this, oldv, newv)
  }

  def getState: State[T] = {
    updater.get(this)
  }

  @tailrec private def tryCompleteState(completed: State[T]): List[Callback] = (getState: @unchecked) match {
    case p @ Pending(cbs) => if (!casState(p, completed)) tryCompleteState(completed) else cbs
    case _ => null
  }
  
  def tryComplete(r: Try[T]) = r match {
    case util.Failure(t) => tryFailure(t)
    case util.Success(v) => trySuccess(v)
  }
  
  override def trySuccess(value: T): Boolean = {
    val cbs = tryCompleteState(Success(value))
    if (cbs == null)
      false
    else {
      processCallbacks(cbs, util.Success(value))
      this.synchronized {
        this.notifyAll()
      }
      true
    }
  }

  override def tryFailure(t: Throwable): Boolean = {
    val wrapped = wrap(t)
    val cbs = tryCompleteState(Failure(wrapped))
    if (cbs == null)
      false
    else {
      processCallbacks(cbs, util.Failure(wrapped))
      this.synchronized {
        this.notifyAll()
      }
      true
    }
  }
  
  def await(atMost: Duration)(implicit canawait: scala.concurrent.CanAwait): T = getState match {
    case Success(res) => res
    case Failure(t)   => throw t
    case _ =>
      this.synchronized {
        while (true)
          getState match {
            case Pending(_)   => this.wait()
            case Success(res) => return res
            case Failure(t)   => throw t
          }
      }
      sys.error("unreachable")
  }
  
}

private[concurrent] class TaskImpl[T](context: ExecutionContextImpl, body: => T)
extends RecursiveAction with Task[T] with Future[T] with Completable[T] {

  val executor: ExecutionContextImpl = context

  @volatile private var state: State[T] = _

  val updater = AtomicReferenceFieldUpdater.newUpdater(classOf[TaskImpl[T]], classOf[State[T]], "state")

  updater.set(this, Pending(List()))
  
  def casState(oldv: State[T], newv: State[T]): Boolean = {
    updater.compareAndSet(this, oldv, newv)
  }

  def getState: State[T] = {
    updater.get(this)
  }

  @tailrec private def tryCompleteState(completed: State[T]): List[Callback] = (getState: @unchecked) match {
    case p @ Pending(cbs) => if (!casState(p, completed)) tryCompleteState(completed) else cbs
  }
  
  def compute(): Unit = {
    var cbs: List[Callback] = null
    try {
      val res = body
      processCallbacks(tryCompleteState(Success(res)), util.Success(res))
    } catch {
      case t if NonFatal(t) =>
        processCallbacks(tryCompleteState(Failure(t)), util.Failure(t))
      case t =>
        val ee = new ExecutionException(t)
        processCallbacks(tryCompleteState(Failure(ee)), util.Failure(ee))
        throw t
    }
  }
  
  def start(): Unit = {
    Thread.currentThread match {
      case fj: ForkJoinWorkerThread if fj.getPool eq executor.pool => fork()
      case _ => executor.pool.execute(this)
    }
  }
  
  // TODO FIXME: handle timeouts
  def await(atMost: Duration): this.type =
    await
  
  def await: this.type = {
    this.join()
    this
  }
  
  def tryCancel(): Unit =
    tryUnfork()
  
  def await(atMost: Duration)(implicit canawait: CanAwait): T = {
    join() // TODO handle timeout also
    (updater.get(this): @unchecked) match {
      case Success(r) => r
      case Failure(t) => throw t
    }
  }
  
}


private[concurrent] sealed abstract class State[T]


case class Pending[T](callbacks: List[Try[T] => Any]) extends State[T]


case class Success[T](result: T) extends State[T]


case class Failure[T](throwable: Throwable) extends State[T]


private[concurrent] final class ExecutionContextImpl extends ExecutionContext {
  import ExecutionContextImpl._
  
  val pool = {
    val p = new ForkJoinPool
    p.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler {
      def uncaughtException(t: Thread, throwable: Throwable) {
        Console.err.println(throwable.getMessage)
        throwable.printStackTrace(Console.err)
      }
    })
    p
  }

  @inline
  private def executeTask(task: RecursiveAction) {
    if (Thread.currentThread.isInstanceOf[ForkJoinWorkerThread])
      task.fork()
    else
      pool execute task
  }

  def execute(task: Runnable) {
    val action = new RecursiveAction { def compute() { task.run() } }
    executeTask(action)
  }
  
  def execute[U](body: () => U) {
    val action = new RecursiveAction { def compute() { body() } }
    executeTask(action)
  }
  
  def task[T](body: => T): Task[T] = {
    new TaskImpl(this, body)
  }
  
  def future[T](body: => T): Future[T] = {
    val t = task(body)
    t.start()
    t.future
  }
  
  def promise[T]: Promise[T] =
    new PromiseImpl[T](this)
  
  def blocking[T](atMost: Duration)(body: =>T): T = blocking(body2awaitable(body), atMost)
  
  def blocking[T](awaitable: Awaitable[T], atMost: Duration): T = {
    currentExecutionContext.get match {
      case null => awaitable.await(atMost)(null) // outside - TODO - fix timeout case
      case x if x eq this => this.blockingCall(awaitable) // inside an execution context thread on this executor
      case x => x.blocking(awaitable, atMost)
    }
  }
  
  private def blockingCall[T](b: Awaitable[T]): T = b match {
    case fj: TaskImpl[_] if fj.executor.pool eq pool =>
      fj.await(Duration.fromNanos(0))
    case _ =>
      var res: T = null.asInstanceOf[T]
      @volatile var blockingDone = false
      // TODO add exception handling here!
      val mb = new ForkJoinPool.ManagedBlocker {
        def block() = {
          res = b.await(Duration.fromNanos(0))(CanAwaitEvidence)
          blockingDone = true
          true
        }
        def isReleasable = blockingDone
      }
      ForkJoinPool.managedBlock(mb, true)
      res
  }

  def reportFailure(t: Throwable): Unit = {}
  
}


object ExecutionContextImpl {
  
  private[concurrent] def currentExecutionContext: ThreadLocal[ExecutionContext] = new ThreadLocal[ExecutionContext] {
    override protected def initialValue = null
  }
  
}







